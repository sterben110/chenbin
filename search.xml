<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2、Hexo的应用</title>
    <url>/2020/07/08/Hexo/2%E3%80%81Hexo%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p><a name="3a3636e1"></a></p>
<h1 id="一、创建博客"><a href="#一、创建博客" class="headerlink" title="一、创建博客"></a>一、创建博客</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new 博客名</span><br></pre></td></tr></table></figure>
<p>利用这条命令我们可以创建一个新的md文件，比如我们输入<code>hexo new hello</code>，<br />那么框架就会自动替我们创建一个叫做hello.md的文。<br />创建的md文件存放在我们博客文件夹下source/_posts文件夹内，然后重新发布博客就可以了。<br><a name="beb9b908"></a></p>
<h1 id="二、Hexo更换主题"><a href="#二、Hexo更换主题" class="headerlink" title="二、Hexo更换主题"></a>二、Hexo更换主题</h1><p><a name="3cbb5269"></a></p>
<h2 id="1、下载主题文件至themes目录下"><a href="#1、下载主题文件至themes目录下" class="headerlink" title="1、下载主题文件至themes目录下"></a>1、下载主题文件至themes目录下</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在博客根目录中使用该命令</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>


<blockquote>
<p>这里<code>[https://github.com/iissnan/hexo-theme-next](https://github.com/iissnan/hexo-theme-next)</code>是该主题的仓库地址</p>
</blockquote>
<blockquote>
<p><code>themes/next</code>表示下载到根目录中的themes文件夹下，下载为next文<br>件夹，注意前面有个空格和仓库地址分隔哦</p>
</blockquote>
<p><a name="95cb21c7"></a></p>
<h2 id="2、更改文件配置"><a href="#2、更改文件配置" class="headerlink" title="2、更改文件配置"></a>2、更改文件配置</h2><p>我们打开<code>_config.yml</code>这个文件，将配置中的<code>theme: landscape</code>改为<code>theme: next</code><br><a name="f6cb763b"></a></p>
<h2 id="3、发布更改"><a href="#3、发布更改" class="headerlink" title="3、发布更改"></a>3、发布更改</h2><p><code>hexo generate</code> -&gt; <code>hexo deploy</code> -&gt; <code>hexo clean</code> </p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>1、初识Hexo</title>
    <url>/2020/07/08/Hexo/1%E3%80%81%E5%88%9D%E8%AF%86Hexo/</url>
    <content><![CDATA[<h1 id="一、Hexo定义"><a href="#一、Hexo定义" class="headerlink" title="一、Hexo定义"></a>一、Hexo定义</h1><p>hexo是一个快速、简洁且高效的博客框架，它支持几条简短的命令发布博客，因此是对于初学者比较友好的博客框架。</p>
<h1 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h1><p><a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo" target="_blank" rel="noopener">hexo的安装</a></p>
<ol>
<li>安装<strong>Node.js</strong>和<strong>Git</strong></li>
<li>然后使用npm安装Hexo<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li>局部安装 <code>hexo</code> 包<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>安装以后，可以使用以下两种方式执行 Hexo命令：</p>
<ol>
<li><code>npx hexo &lt;command&gt;</code></li>
<li>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo ：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;PATH&#x3D;&quot;$PATH:.&#x2F;node_modules&#x2F;.bin&quot;&#39; &gt;&gt; ~&#x2F;.profile</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="三、创建博客文件夹"><a href="#三、创建博客文件夹" class="headerlink" title="三、创建博客文件夹"></a>三、创建博客文件夹</h1><p>进入某目录，执行如下命令创建博客文件夹：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在当前目录下创建一个叫blog的博客文件夹</span><br><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<h1 id="四、安装发布工具"><a href="#四、安装发布工具" class="headerlink" title="四、安装发布工具"></a>四、安装发布工具</h1><p>进入博客目录（<code>cd blog</code>），打开控制台，输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>


<h1 id="五、修改配置文件"><a href="#五、修改配置文件" class="headerlink" title="五、修改配置文件"></a>五、修改配置文件</h1><p>找到blog文件夹中的<code>_config.yml</code>文件，输入如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: landscape</span><br><span class="line">deploy:</span><br><span class="line">  type: git  </span><br><span class="line">  repository: git@github.com:sterben110&#x2F;sterben110.github.io.git  </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h1 id="六、Hexo提交"><a href="#六、Hexo提交" class="headerlink" title="六、Hexo提交"></a>六、Hexo提交</h1><h2 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a>hexo generate</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>作用是生成新的静态文件,可以简写为<code>hexo g</code></p>
<h2 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>作用是把生成的文件部署到我们的博客上，可以简写为<code>hexo d</code>，发布后，我们就可以看到我们的博客变成了这样：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1594185106908-7ab390a4-e0fc-45bc-a0c0-4b04b20d7392.png#align=left&display=inline&height=1302&margin=%5Bobject%20Object%5D&originHeight=1302&originWidth=2524&size=0&status=done&style=none&width=2524" alt=""></p>
<h2 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>用途是清除缓存，能让新发布的博客能快速生效</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>3、本地电脑部署博客步骤</title>
    <url>/2020/07/08/Hexo/3%E3%80%81%E6%9C%AC%E5%9C%B0%E7%94%B5%E8%84%91%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<p><a name="45ca8f20"></a></p>
<h1 id="一、本地安装Git"><a href="#一、本地安装Git" class="headerlink" title="一、本地安装Git"></a>一、本地安装Git</h1><p><br />在官网下载最新版本的git：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a><br /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查看git版本号</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>

<p><a name="290f6479"></a></p>
<h1 id="二、本地配置SSH并绑定至GitHub"><a href="#二、本地配置SSH并绑定至GitHub" class="headerlink" title="二、本地配置SSH并绑定至GitHub"></a>二、本地配置SSH并绑定至GitHub</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;生成本地SSH</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br><span class="line">&#x2F;&#x2F;查询本地SSH</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>

<p><a name="2d096043"></a></p>
<h1 id="三、本地安装node-js"><a href="#三、本地安装node-js" class="headerlink" title="三、本地安装node.js"></a>三、本地安装node.js</h1><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">下载地址</a><br /></p>
<p><a name="4d0c7542"></a></p>
<h1 id="四、本地安装hexo"><a href="#四、本地安装hexo" class="headerlink" title="四、本地安装hexo"></a>四、本地安装hexo</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">查阅文档</a><br />安装完node.js之后,我们就可以安装Hexo啦，在命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><br />局部安装 hexo 包，在命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure>


<p><a name="5b58a060"></a></p>
<h1 id="五、git-clone-到本地"><a href="#五、git-clone-到本地" class="headerlink" title="五、git clone 到本地"></a>五、git clone 到本地</h1><p>clone 远程仓库dev分支的代码到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b dev 仓库地址</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>生成随机数</title>
    <url>/2020/07/15/Java/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<p><a name="QBuIG"></a></p>
<h2 id="一、Math-random"><a href="#一、Math-random" class="headerlink" title="一、Math.random()"></a>一、Math.random()</h2><p>Math.random() 方法返回一个<font color=red><strong>double类型</strong></font>的随机数，随机数范围为<font color=red><strong>[0,1)</strong></font>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 得到一个随机数</span></span><br><span class="line"><span class="keyword">double</span> value = Math.random();</span><br><span class="line">System.out.println(value);</span><br></pre></td></tr></table></figure>
<p><a name="uXhY2"></a></p>
<h3 id="生成6位随机数的例子"><a href="#生成6位随机数的例子" class="headerlink" title="生成6位随机数的例子"></a>生成6位随机数的例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到一个随机数[10的5次方，10的6次方)</span></span><br><span class="line"><span class="keyword">double</span> value = (Math.random()*<span class="number">9</span>+<span class="number">1</span>)*<span class="number">10</span>⁵;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java冷门知识点</title>
    <url>/2020/07/16/Java/Java%E5%86%B7%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java是如何运行的</title>
    <url>/2020/07/15/Java/Java%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84/</url>
    <content><![CDATA[<p><a name="d8gTZ"></a></p>
<h2 id="一、什么是编程语言"><a href="#一、什么是编程语言" class="headerlink" title="一、什么是编程语言"></a>一、什么是编程语言</h2><p>Java 是一种高级语言，有“高级语言”自然也有“低级语言”，一般计算机世界里把“低级语言”叫做机器语言或者汇编语言。计算机<font color=red><strong>只能运行低级语言</strong></font>，所以<font color=red><strong>高级语言编写的程序必须先被翻译成低级语言才能运行</strong></font>。<br /><font color=red><strong>高级语言的优点</strong></font>有很多：更容易编程、更容易阅读和修改、<font color=red><strong>可移植性高</strong></font>；低级语言只能在一种计算机上运行。<br><a name="pEuKX"></a></p>
<h2 id="二、Java语言的执行"><a href="#二、Java语言的执行" class="headerlink" title="二、Java语言的执行"></a>二、Java语言的执行</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1594785283558-6833f28a-67d6-40f9-b2ab-54ab51ae1885.svg#align=left&display=inline&height=98&margin=%5Bobject%20Object%5D&originHeight=98&originWidth=765&size=0&status=done&style=none&width=765" alt=""><br />Java 既可以被编译也可以被解释，不同的是<font color=red><strong>Java 编译</strong></font>过程并不生成机器语言，而是<font color=red><strong>生成字节码</strong></font>。<font color=red><strong>字节码</strong></font>和机器语言一样，但是它<font color=red><strong>具备高级语言的可移植性</strong></font>。JVM （Java virtual machine ，Java 虚拟机）支持了对<font color=red><strong>字节码的解释运行</strong></font>。<br><a name="yCKxX"></a></p>
<h2 id="三、Java代码的注释"><a href="#三、Java代码的注释" class="headerlink" title="三、Java代码的注释"></a>三、Java代码的注释</h2><p><a name="Cfmrv"></a></p>
<h3 id="1、块注释"><a href="#1、块注释" class="headerlink" title="1、块注释"></a>1、块注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 	我是块注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><a name="kZhPr"></a></p>
<h3 id="2、行注释"><a href="#2、行注释" class="headerlink" title="2、行注释"></a>2、行注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我是行注释</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2020/07/11/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p><a name="eTh4Q"></a></p>
<h2 id="一、动态规划步骤"><a href="#一、动态规划步骤" class="headerlink" title="一、动态规划步骤"></a>一、动态规划步骤</h2><p>1、确定公式自变量，确定函数值的含义<br />2、明确公式<br />3、代码编写<br />（1）考虑特殊情况<br />（2）加入缓存<br />（3）将公式代码化<br />（4）存储缓存（缓存一般为键值对，键存自变量，值存相应的函数值）<br><a name="8h5iD"></a></p>
<h2 id="二、经典案例"><a href="#二、经典案例" class="headerlink" title="二、经典案例"></a>二、经典案例</h2><p><a name="ojxQH"></a></p>
<h3 id="1、钞票凑数问题"><a href="#1、钞票凑数问题" class="headerlink" title="1、钞票凑数问题"></a>1、钞票凑数问题</h3><blockquote>
<p>假设有11元、5元、1元面额的钞票，如何凑出15元使得钞票数量最少？</p>
</blockquote>
<p>我们用<strong>f(M)</strong>来表示<strong>凑出 M 所需的最少钞票数量</strong>，以上情况可表示为：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1594446749488-bd8945f6-b875-4bdd-80bb-f84e5da33874.png#align=left&display=inline&height=108&margin=%5Bobject%20Object%5D&originHeight=216&originWidth=819&size=0&status=done&style=none&width=410" alt=""><br /><br><br />则该问题的公式可概括为：<br /><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1594446986811-e97f8502-606b-45df-a1e2-af4390f709b1.svg#align=left&display=inline&height=22&margin=%5Bobject%20Object%5D&originHeight=22&originWidth=479&size=0&status=done&style=none&width=479" alt=""><br />加入缓存后的代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找最少的钞票数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// #1 处理边界情况</span></span><br><span class="line">	<span class="keyword">if</span> (m &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">       </span><br><span class="line">	<span class="comment">// #2 加入缓存</span></span><br><span class="line">	<span class="keyword">if</span>(map.containsKey(m))&#123;</span><br><span class="line">	  <span class="keyword">return</span> map.get(m);</span><br><span class="line">	&#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// #3 处理公式</span></span><br><span class="line">       <span class="comment">// 取 1 、5、11的最小钞票书数</span></span><br><span class="line">	<span class="keyword">int</span> min = Math.min(f(m - <span class="number">1</span>), f(m - <span class="number">5</span>));</span><br><span class="line">	min = Math.min(min, f(m - <span class="number">11</span>));</span><br><span class="line">       </span><br><span class="line">	<span class="comment">// #3 存储缓存</span></span><br><span class="line">       <span class="comment">//m代表函数自变量，min+1为函数值</span></span><br><span class="line">	map.put(m, min + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> min + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="mjTuX"></a></p>
<h3 id="2、背包放财宝问题"><a href="#2、背包放财宝问题" class="headerlink" title="2、背包放财宝问题"></a>2、背包放财宝问题</h3><blockquote>
<p>假设我们有一个背包可以容纳10KG的物品，现在有 5 个物品，重量分别为2、2、6、5、4，他们的价值分别是6、3、5、4、6。每个物品只有一件，也就是要么取要么不取。请问，怎么装背包，才能带走更多的财富？</p>
</blockquote>
<p>我们将<strong>f(w)</strong>表示<strong>在w 重量的背包下，获取到的最大价值。</strong></p>
<blockquote>
<p>如果取第一个物品，<strong>f(w) = 6 + f(w-2)</strong> 其中 6 是第一个物品的价值，f(w-2)表示放置了第一个物品之后的最优解。<br>如果取第二个物品，f(w) = 3 + f(w-2)<br>如果取第三个物品，f(w) = 5 + f(w-6)<br>如果取第四个物品，f(w) = 4 + f(w-5)<br>如果取第五个物品，f(w) = 6 + f(w-4)</p>
</blockquote>
<p>而我们需要取的是上述 5 种情况的最大值，也就是公式如下：<br /><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1594448392744-2299eb65-3a08-4274-931e-114aa2761f26.svg#align=left&display=inline&height=18&margin=%5Bobject%20Object%5D&originHeight=18&originWidth=557&size=0&status=done&style=none&width=557" alt=""><br />代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最找背包最优装法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span>[][] objects)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 当重量小于或者等于0的时候，返回0</span></span><br><span class="line">	<span class="keyword">if</span> (w &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	String key = w + <span class="string">"-"</span> + Arrays.toString(objects);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 优先从缓存中获取</span></span><br><span class="line">	<span class="keyword">if</span> (hashMap.containsKey(key)) &#123;</span><br><span class="line">		<span class="keyword">return</span> hashMap.get(key);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 化简为子问题</span></span><br><span class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span>[] object = objects[i];</span><br><span class="line">		<span class="keyword">int</span> weight = object[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> money = object[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> canGet = object[<span class="number">2</span>];</span><br><span class="line">		<span class="comment">// #2. 如果已经被获取，则跳过</span></span><br><span class="line">		<span class="keyword">if</span> (canGet == <span class="number">1</span>) &#123;</span><br><span class="line">		  <span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// #1.只有空间足够放才往下面进行</span></span><br><span class="line">		<span class="keyword">if</span> (w &gt;= weight) &#123;</span><br><span class="line">		  <span class="comment">// #3. 在取用之间进行设置，取用之后进行恢复</span></span><br><span class="line">		  object[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">			max = Math.max(max, f(w - weight, objects) + money);</span><br><span class="line">			object[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	hashMap.put(key, max);</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="0bDS0"></a></p>
<h3 id="3、台阶问题"><a href="#3、台阶问题" class="headerlink" title="3、台阶问题"></a>3、台阶问题</h3><blockquote>
<p>有一个高度是 10 级的台阶，从下往上走，每跨一步只能向上 1 级或者 2 级台阶。求出一共有多少种走法？</p>
</blockquote>
<p>我们将<strong>f(s)</strong>表示<strong>在s级台阶下的走法数。</strong><br />公式如下：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1594452385600-ae57d35f-69b8-4b8d-a62c-fea5b6f9a370.png#align=left&display=inline&height=27&margin=%5Bobject%20Object%5D&name=image.png&originHeight=54&originWidth=392&size=4167&status=done&style=none&width=196" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap &lt; Integer, Integer &gt; cache = <span class="keyword">new</span> HashMap &lt; &gt; ();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 求stepNum级楼梯走法数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> stepNum)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//处理边界情况</span></span><br><span class="line">	<span class="comment">// 没有楼梯</span></span><br><span class="line">	<span class="keyword">if</span> (stepNum &lt; <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 楼梯为1阶v</span></span><br><span class="line">	<span class="keyword">if</span> (stepNum == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 楼梯为2阶</span></span><br><span class="line">	<span class="keyword">if</span> (stepNum == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (cache.containsKey(stepNum)) &#123;</span><br><span class="line">		<span class="keyword">return</span> cache.get(stepNum);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> sum = f(stepNum - <span class="number">1</span>) + f(stepNum - <span class="number">2</span>);</span><br><span class="line">	cache.put(stepNum, sum);</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="t4kXQ"></a></p>
<h3 id="4、打家劫舍的例子"><a href="#4、打家劫舍的例子" class="headerlink" title="4、打家劫舍的例子"></a>4、打家劫舍的例子</h3><blockquote>
<p>现在你是一个专业的小偷，计划偷窃沿街的房屋。每个房间里都有一定的现金，影响你偷窃的唯一制约是两个相邻的房间装有互相连同通的防盗系统，也就是<strong>如果两个相邻的房间在同一晚上被小偷盗窃，系统会自动报警。</strong>请在不触动警报装置的情况下，如何盗窃到最高金额的现金?</p>
</blockquote>
<p>我们将<strong>f(index)</strong>表示<strong>从第index个房间开始从右向左盗窃的最高金额。</strong><br />情况表示如下：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1594452357561-664494e7-493d-477b-9784-6a3da2576b2a.png#align=left&display=inline&height=52&margin=%5Bobject%20Object%5D&name=image.png&originHeight=103&originWidth=771&size=23444&status=done&style=none&width=385.5" alt="image.png"><br />公式如下：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1594452258480-d3b51f5f-38d5-4482-9081-d2e7b5d64b4d.png#align=left&display=inline&height=28&margin=%5Bobject%20Object%5D&name=image.png&originHeight=56&originWidth=770&size=12748&status=done&style=none&width=385" alt="image.png"><br />代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入（房间依次现金）: [1,2,3,1]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 偷窃 1 号房屋 (金额 &#x3D; 1) ，然后偷窃 3 号房屋 (金额 &#x3D; 3)。偷窃到的最高金额 &#x3D; 1 + 3 &#x3D; 4 。</span><br><span class="line"></span><br><span class="line">输入: [2,7,9,3,1]</span><br><span class="line">输出: 12</span><br><span class="line">解释: 偷窃 1 号房屋 (金额 &#x3D; 2), 偷窃 3 号房屋 (金额 &#x3D; 9)，接着偷窃 5 号房屋 (金额 &#x3D; 1)。     偷窃到的最高金额 &#x3D; 2 + 9 + 1 &#x3D; 12 。</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> HashMap &lt; Integer, Integer &gt; cache = <span class="keyword">new</span> HashMap &lt; &gt; ();</span><br><span class="line"> 	<span class="comment">// 一夜之间获取的最高现金</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>[] rooms)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 每次调用的时候，将cache情况</span></span><br><span class="line">	cache.clear();</span><br><span class="line">	<span class="comment">// 从右侧开始考虑是否偷盗，有新的思路也可以按照自己思路来</span></span><br><span class="line">	<span class="keyword">return</span> fCore(rooms, rooms.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fCore</span><span class="params">(<span class="keyword">int</span>[] rooms, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 处理边界情况</span></span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> rooms[index];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cache.containsKey(index)) &#123;</span><br><span class="line">		<span class="keyword">return</span> cache.get(index);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 最后一个房间偷或者不偷两种情况。</span></span><br><span class="line">	<span class="keyword">int</span> max = Math.max(fCore(rooms, index - <span class="number">1</span>), fCore(rooms, index - <span class="number">2</span>) + rooms[index]);</span><br><span class="line">	cache.put(index, max);</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
</search>
