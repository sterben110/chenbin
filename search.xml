<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java网络通信</title>
    <url>/2020/10/10/Java%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、使用URL访问网络资源"><a href="#1、使用URL访问网络资源" class="headerlink" title="1、使用URL访问网络资源"></a>1、使用URL访问网络资源</h2><blockquote>
<p>一个<strong>URL对象</strong>表示在Internet上的一个<strong>文件名</strong>，一个<strong>URLConnection对象</strong>表示在Internet上的一个<strong>文件</strong>，文件名由URL指定<br>一个<strong>InetAddress对象</strong>表示在Internet上的<strong>一台计算机的主机名和其IP地址</strong>，提供将主机名解析为其IP地址的方法</p>
</blockquote>
<h3 id="URL类"><a href="#URL类" class="headerlink" title="URL类"></a>URL类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">URL</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">URL</span><span class="params">(String spec)</span>		<span class="comment">//构造方法</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    <span class="comment">//获取URL对象所代表网络资源的输入流，用于读操作</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">final</span> InputStream <span class="title">openStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    <span class="comment">//创建一个URLConnection对象，相对于由文件名构建一个File对象</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> URLConnection <span class="title">openConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>构造方法示例</p>
<blockquote>
<p>URL url1 = new URL(“file://localhost/D:/Java/test.txt”)        //使用FILE协议，表示本机】文件系统<br>URL url2 = new URL(“<a href="http://www.phei.com.cn&quot;" target="_blank" rel="noopener">http://www.phei.com.cn&quot;</a>)        //使用HTTP协议，表示网络上的某个文件</p>
</blockquote>
<h3 id="URLConnection类"><a href="#URLConnection类" class="headerlink" title="URLConnection类"></a>URLConnection类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">URLConnection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentLength</span><span class="params">()</span>	<span class="comment">//返回资源文件的长度</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span>	<span class="comment">//返回资源文件的类型</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">()</span>	<span class="comment">//返回资源文件的最后修改日期</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddress</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InetAddress <span class="title">getByName</span><span class="params">(String host)</span> <span class="keyword">throws</span> UnknownHostException</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">static</span> InetAddress <span class="title">getByAddress</span><span class="params">(String host,<span class="keyword">byte</span>[] addr)</span> <span class="keyword">throws</span> UnknownHostException</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">static</span> InetAddress <span class="title">getLocalHost</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException	<span class="comment">//返回本地主机</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getHostAddress</span><span class="params">()</span>		<span class="comment">//返回IP地址字符串</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">getHostName</span><span class="params">()</span>			<span class="comment">//返回主机名</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span>			<span class="comment">//返回主机名和IP地址字符串</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例</p>
<blockquote>
<p>InetAddress.getByName(url.getHost()).getHostAddress()    //返回url指定主机名的IP地址字符串<br>InetAddress.getLocalHost().getHostAddress()                    //返回本机的IP地址字符串</p>
</blockquote>
<h2 id="2、TCP-Socket通信"><a href="#2、TCP-Socket通信" class="headerlink" title="2、TCP Socket通信"></a>2、TCP Socket通信</h2><p>通信流程说明如下：</p>
<blockquote>
<ol>
<li>服务器端创建一个<strong>指定端口号的ServerSocket对象</strong>，调用<strong>accept()方法</strong>等待接收客户端的连接请求，等待期间当前<strong>进程处于阻塞状态</strong>；</li>
<li>客户端创建一个<strong>Socket对象</strong>，指定服务器端主机的<strong>IP地址（或域名）和端口</strong>，发出TCP请求；</li>
<li>服务器端接收到请求，建立一条TCP连接，accept()方法<strong>返回一个Socket对象</strong>，通过该Socket对象与客户端的Socket对象实现实时通信。</li>
<li>当一方决定结束通信时，会向对方发送结束信息，另一方接收到结束信息后，双方分别关闭各自的TCP连接。</li>
<li>ServerSocket对象停止等待客户端的连接请求。</li>
</ol>
</blockquote>
<h3 id="ServerSocket类"><a href="#ServerSocket类" class="headerlink" title="ServerSocket类"></a>ServerSocket类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocket</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerSocket</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException	<span class="comment">//构造方法指定端口</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> Socket <span class="title">accept</span><span class="params">()</span>	<span class="keyword">throws</span> IOException			<span class="comment">//等待接收客户端的连接请求</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Socket</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Socket</span><span class="params">(String host, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> UnknownHostException,IOException</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="title">Socket</span><span class="params">(InetAddress ip, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span>		<span class="comment">//返回远程对方的端口</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLocalPort</span><span class="params">()</span>	<span class="comment">//返回本地己方的端口</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    <span class="comment">//获取输入输出流</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException		<span class="comment">//获取TCP连接提供的字节输入流</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> OutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException	<span class="comment">//获取TCP连接提供的字节输出流</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例<br><strong>服务器端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocket serverSocket=<span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">            System.out.println(<span class="string">"服务端已启动，等待客户端连接.."</span>);</span><br><span class="line">            <span class="comment">//侦听并接受到此套接字的连接,返回一个Socket对象,进入阻塞态</span></span><br><span class="line">            Socket socket=serverSocket.accept();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//根据输入输出流和客户端连接</span></span><br><span class="line">            InputStream inputStream=socket.getInputStream();<span class="comment">//得到一个输入流，接收客户端传递的信息</span></span><br><span class="line">            InputStreamReader inputStreamReader=<span class="keyword">new</span> InputStreamReader(inputStream);<span class="comment">//字节流转为字符流</span></span><br><span class="line">            BufferedReader bufferedReader=<span class="keyword">new</span> BufferedReader(inputStreamReader);<span class="comment">//加入缓冲区</span></span><br><span class="line">            String temp=<span class="keyword">null</span>;</span><br><span class="line">            String info=<span class="string">""</span>;</span><br><span class="line">            <span class="keyword">while</span>((temp=bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                info+=temp;</span><br><span class="line">                System.out.println(<span class="string">"已接收到客户端连接"</span>);</span><br><span class="line">                System.out.println(<span class="string">"服务端接收到客户端信息："</span>+info+<span class="string">",当前客户端ip为："</span>+socket.getInetAddress().getHostAddress());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            OutputStream outputStream=socket.getOutputStream();<span class="comment">//获取一个输出流，向服务端发送信息</span></span><br><span class="line">            PrintWriter printWriter=<span class="keyword">new</span> PrintWriter(outputStream);<span class="comment">//将输出流包装成打印流</span></span><br><span class="line">            printWriter.print(<span class="string">"你好，服务端已接收到您的信息"</span>);</span><br><span class="line">            printWriter.flush();</span><br><span class="line">            socket.shutdownOutput();<span class="comment">//关闭输出流</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//关闭相对应的资源</span></span><br><span class="line">            printWriter.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            bufferedReader.close();</span><br><span class="line">            inputStream.close();</span><br><span class="line">            socket.close();</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建Socket对象</span></span><br><span class="line">            Socket socket=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8888</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//根据输入输出流和服务端连接</span></span><br><span class="line">            OutputStream out=socket.getOutputStream();<span class="comment">//获取一个输出流，向服务端发送信息</span></span><br><span class="line">            PrintWriter printWriter=<span class="keyword">new</span> PrintWriter(out);<span class="comment">//将输出流包装成打印流</span></span><br><span class="line">            printWriter.print(<span class="string">"服务端你好，我是balabala"</span>);</span><br><span class="line">            printWriter.flush();</span><br><span class="line">            socket.shutdownOutput();<span class="comment">//关闭输出流</span></span><br><span class="line">            </span><br><span class="line">            InputStream in=socket.getInputStream();<span class="comment">//获取一个输入流，接收服务端的信息</span></span><br><span class="line">            InputStreamReader inputStreamReader=<span class="keyword">new</span> InputStreamReader(inputStream);<span class="comment">//包装成字符流，提高效率</span></span><br><span class="line">            BufferedReader bufferedReader=<span class="keyword">new</span> BufferedReader(inputStreamReader);<span class="comment">//缓冲区</span></span><br><span class="line">            String info=<span class="string">""</span>;</span><br><span class="line">            String temp=<span class="keyword">null</span>;<span class="comment">//临时变量</span></span><br><span class="line">            <span class="keyword">while</span>((temp=bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                info+=temp;</span><br><span class="line">                System.out.println(<span class="string">"客户端接收服务端发送信息："</span>+info);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//关闭相对应的资源</span></span><br><span class="line">            bufferedReader.close();</span><br><span class="line">            inputStream.close();</span><br><span class="line">            printWriter.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            socket.close();</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3、UDP数据报通信"><a href="#3、UDP数据报通信" class="headerlink" title="3、UDP数据报通信"></a>3、UDP数据报通信</h2><h3 id="DatagramPacket-数据报包）类"><a href="#DatagramPacket-数据报包）类" class="headerlink" title="DatagramPacket(数据报包）类"></a>DatagramPacket(数据报包）类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatagramPacket</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建待发送数据报包</span></span><br><span class="line">    <span class="comment">//buffer为包数据,length为包长度,ip为目标主机,port为目标主机端口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatagramPacket</span><span class="params">(<span class="keyword">byte</span>[] buffer,<span class="keyword">int</span> length,InetAddress ip,<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    <span class="comment">//创建待接收数据报包</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="title">DatagramPacket</span><span class="params">(<span class="keyword">byte</span>[] buffer,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//获取接收到的数据报包的属性及其数据</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">getData</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> InetAddress <span class="title">getAddress</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="DatagramSocket-数据报Socket）类"><a href="#DatagramSocket-数据报Socket）类" class="headerlink" title="DatagramSocket(数据报Socket）类"></a>DatagramSocket(数据报Socket）类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatagramSocket</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatagramSocket</span><span class="params">()</span> <span class="keyword">throws</span> SocketException			<span class="comment">//创建Socket,绑定一可用端口</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="title">DatagramSocket</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> SocketException	<span class="comment">//创建Socket,port指定端口</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramPacket pack)</span> <span class="keyword">throws</span> IOException	<span class="comment">//发送pack数据报包</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(DatagramPacket pack)</span> <span class="keyword">throws</span> IOException	<span class="comment">//接收数据报包存于pack中</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>示例**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//接收数据报包</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8800</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">// 创建字节数组，指定接收的数据包的大小</span></span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, data.length);</span><br><span class="line">        socket.receive(packet);<span class="comment">// 此方法在接收到数据报之前会一直阻塞</span></span><br><span class="line">        String info = <span class="keyword">new</span> String(data, <span class="number">0</span>, packet.getLength());</span><br><span class="line">        System.out.println(<span class="string">"我是服务器，客户端说："</span> + info);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//发送数据报包</span></span><br><span class="line">        InetAddress address = packet.getAddress();</span><br><span class="line">        <span class="keyword">int</span> port = packet.getPort();</span><br><span class="line">        <span class="keyword">byte</span>[] data2 = <span class="string">"欢迎您!"</span>.getBytes();</span><br><span class="line">        DatagramPacket packet2 = <span class="keyword">new</span> DatagramPacket(data2, data2.length, address, port);</span><br><span class="line">        socket.send(packet2);</span><br><span class="line">        </span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Hexo问题与解决方案</title>
    <url>/2020/07/17/Hexo/Hexo%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、hexo引用外网的图片不显示"><a href="#1、hexo引用外网的图片不显示" class="headerlink" title="1、hexo引用外网的图片不显示"></a>1、hexo引用外网的图片不显示</h2><p>方法其实很简单，只需要文章的头部如下图所示位置添加<code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;</code>这一句话就可以完美解决问题。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo问题与解决方案</span><br><span class="line">toc: true</span><br><span class="line">date: 2020-07-17 18:24:16</span><br><span class="line">categories:</span><br><span class="line">---</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"no-referrer"</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>css应用</title>
    <url>/2020/08/10/CSS/css%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、单行文本超出省略"><a href="#1、单行文本超出省略" class="headerlink" title="1、单行文本超出省略"></a>1、单行文本超出省略</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 强制不换行 *&#x2F;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">&#x2F;* 隐藏超出部分 *&#x2F;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#x2F;* 用省略号代替剩余内容 *&#x2F;</span><br><span class="line">text-overflow: ellipsis;</span><br></pre></td></tr></table></figure>

<h2 id="2、元素水平居中"><a href="#2、元素水平居中" class="headerlink" title="2、元素水平居中"></a>2、元素水平居中</h2><blockquote>
<ol>
<li>若内部为行内元素，我们可以在父容器上使用 <code>text-align: center</code>  。</li>
<li>若内部是块状元素，我们可以在子容器上使用 <code>margin: 0 auto</code> （若内部不是块状元素，需要设置 <code>display: block</code> ）。</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo的应用</title>
    <url>/2020/07/08/Hexo/Hexo%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="一、创建博客"><a href="#一、创建博客" class="headerlink" title="一、创建博客"></a>一、创建博客</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new 博客名</span><br></pre></td></tr></table></figure>
<p>利用这条命令我们可以创建一个新的md文件，比如我们输入<code>hexo new hello</code>，<br>那么框架就会自动替我们创建一个叫做hello.md的文。<br>创建的md文件存放在我们博客文件夹下source/_posts文件夹内，然后重新发布博客就可以了。</p>
<h1 id="二、Hexo更换主题"><a href="#二、Hexo更换主题" class="headerlink" title="二、Hexo更换主题"></a>二、Hexo更换主题</h1><h2 id="1、下载主题文件至themes目录下"><a href="#1、下载主题文件至themes目录下" class="headerlink" title="1、下载主题文件至themes目录下"></a>1、下载主题文件至themes目录下</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在博客根目录中使用该命令</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>


<blockquote>
<p>这里<code>[https://github.com/iissnan/hexo-theme-next](https://github.com/iissnan/hexo-theme-next)</code>是该主题的仓库地址</p>
</blockquote>
<blockquote>
<p><code>themes/next</code>表示下载到根目录中的themes文件夹下，下载为next文<br>件夹，注意前面有个空格和仓库地址分隔哦</p>
</blockquote>
<h2 id="2、更改文件配置"><a href="#2、更改文件配置" class="headerlink" title="2、更改文件配置"></a>2、更改文件配置</h2><p>我们打开<code>_config.yml</code>这个文件，将配置中的<code>theme: landscape</code>改为<code>theme: next</code></p>
<h2 id="3、发布更改"><a href="#3、发布更改" class="headerlink" title="3、发布更改"></a>3、发布更改</h2><p><code>hexo generate</code> -&gt; <code>hexo deploy</code> -&gt; <code>hexo clean</code> </p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>css</title>
    <url>/2020/07/31/CSS/css/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h1><table>
<thead>
<tr>
<th align="left">选择器</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><font color="red">元素选择器</font></td>
<td align="left"><strong>html {color: black;}</strong></td>
</tr>
<tr>
<td align="left"><font color="red">类选择器</font></td>
<td align="left"><strong>.important {font-weight: bold;}</strong></td>
</tr>
<tr>
<td align="left"><font color="red">id选择器</font></td>
<td align="left"><strong>#red {color: red;}</strong></td>
</tr>
<tr>
<td align="left"><font color="red">后代选择器</font></td>
<td align="left"><strong>#password .box p{}</strong></td>
</tr>
<tr>
<td align="left"><font color="red">子选择器</font></td>
<td align="left"><strong>p&gt;span {color: orangered;}</strong></td>
</tr>
<tr>
<td align="left"><font color="red">相邻兄弟选择器</font></td>
<td align="left"><strong>h1 + p {margin-top:50px;}</strong></td>
</tr>
<tr>
<td align="left"><font color="red">伪类</font></td>
<td align="left"><strong>span::before {}</strong><br><strong>span::after {}</strong><br><strong>li:hover {}       /* 鼠标悬浮时 */</strong><br><strong>li:active {}       /* 鼠标点击时 */</strong><br><strong>input:focus {}     /* 获取焦点后 */</strong><br><strong>ul&gt;li:first-child {}     /* 匹配父元素的第一个子元素 */</strong><br><strong>ul&gt;li:last-child {}      /* 匹配父元素的最后一个子元素 */</strong><br><strong>ul&gt;li:nth-child(3) {}      /* 匹配父元素的第3个子元素 */</strong><br><strong>ul&gt;li:not(:last-child) {}    /* 匹配父元素除最后一个元素之外的子元素 */</strong></td>
</tr>
</tbody></table>
<h1 id="CSS-样式"><a href="#CSS-样式" class="headerlink" title="CSS 样式"></a>CSS 样式</h1><h2 id="1、背景属性"><a href="#1、背景属性" class="headerlink" title="1、背景属性"></a>1、背景属性</h2><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><font color="red">background</font></td>
<td align="left">简写属性，作用是将背景属性设置在一个声明中。</td>
</tr>
<tr>
<td align="left"><font color="red">background-color</font></td>
<td align="left">设置元素的背景颜色。</td>
</tr>
<tr>
<td align="left"><font color="red">background-image</font></td>
<td align="left">把图像设置为背景。</td>
</tr>
<tr>
<td align="left"><font color="red">background-repeat</font></td>
<td align="left">设置背景图像是否及如何重复。</td>
</tr>
<tr>
<td align="left"><font color="red">background-attachment</font></td>
<td align="left">背景图像是否固定或者随着页面的其余部分滚动。</td>
</tr>
<tr>
<td align="left"><font color="red">background-position</font></td>
<td align="left">设置背景图像的起始位置。</td>
</tr>
<tr>
<td align="left"><font color="red">background-size</font></td>
<td align="left">规定背景图片的尺寸。</td>
</tr>
<tr>
<td align="left"><font color="red">background-clip</font></td>
<td align="left">规定背景的绘制区域。</td>
</tr>
</tbody></table>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1596976556478-65ef8cc4-ee30-4f22-9fd8-f0c5d0eeec45.png#align=left&display=inline&height=587&margin=%5Bobject%20Object%5D&name=%E6%96%87%E5%AD%97%E5%B1%9E%E6%80%A7.png&originHeight=1108&originWidth=1408&size=161757&status=done&style=none&width=746" alt="文字属性.png"></p>
<h2 id="2、文本属性"><a href="#2、文本属性" class="headerlink" title="2、文本属性"></a>2、文本属性</h2><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><font color="red">color</font></td>
<td align="left">设置文本颜色</td>
</tr>
<tr>
<td align="left"><font color="red">direction</font></td>
<td align="left">设置文本方向。</td>
</tr>
<tr>
<td align="left"><font color="red">line-height</font></td>
<td align="left">设置行高。</td>
</tr>
<tr>
<td align="left"><font color="red">letter-spacing</font></td>
<td align="left">设置字符间距。</td>
</tr>
<tr>
<td align="left"><font color="red">text-align</font></td>
<td align="left">对齐元素中的文本。</td>
</tr>
<tr>
<td align="left"><font color="red">text-decoration</font></td>
<td align="left">向文本添加修饰。</td>
</tr>
<tr>
<td align="left"><font color="red">text-indent</font></td>
<td align="left">缩进元素中文本的首行。</td>
</tr>
<tr>
<td align="left"><font color="red">text-shadow</font></td>
<td align="left">设置文本阴影。CSS2 包含该属性，但是 CSS2.1 没有保留该属性。</td>
</tr>
<tr>
<td align="left"><font color="red">text-transform</font></td>
<td align="left">控制元素中的字母。</td>
</tr>
<tr>
<td align="left"><font color="red">white-space</font></td>
<td align="left">设置元素中空白的处理方式。</td>
</tr>
<tr>
<td align="left"><font color="red">word-spacing</font></td>
<td align="left">设置字间距。</td>
</tr>
</tbody></table>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1596974416669-a276023a-3cac-4bf9-943a-d1e8dac0fae2.png#align=left&display=inline&height=534&margin=%5Bobject%20Object%5D&name=%E6%96%87%E6%9C%AC%E5%B1%9E%E6%80%A7.png&originHeight=534&originWidth=821&size=52265&status=done&style=none&width=821" alt="文本属性.png"></p>
<h2 id="3、字体属性"><a href="#3、字体属性" class="headerlink" title="3、字体属性"></a>3、字体属性</h2><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><font color="red">font-family</font></td>
<td align="left">设置字体系列。</td>
</tr>
<tr>
<td align="left"><font color="red">font</font></td>
<td align="left">简写属性。作用是把所有针对字体的属性设置在一个声明中。</td>
</tr>
<tr>
<td align="left"><font color="red">font-size</font></td>
<td align="left">设置字体的尺寸。</td>
</tr>
<tr>
<td align="left"><font color="red">font-size-adjust</font></td>
<td align="left">当首选字体不可用时，对替换字体进行智能缩放。（CSS2.1 已删除该属性。）</td>
</tr>
<tr>
<td align="left"><font color="red">font-stretch</font></td>
<td align="left">对字体进行水平拉伸。（CSS2.1 已删除该属性。）</td>
</tr>
<tr>
<td align="left"><font color="red">font-style</font></td>
<td align="left">设置字体风格。</td>
</tr>
<tr>
<td align="left"><font color="red">font-variant</font></td>
<td align="left">以小型大写字体或者正常字体显示文本。</td>
</tr>
<tr>
<td align="left"><font color="red">font-weight</font></td>
<td align="left">设置字体的粗细。</td>
</tr>
</tbody></table>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1596973316953-bacf2300-9d23-4658-ba4c-ff1804035db4.png#align=left&display=inline&height=643&margin=%5Bobject%20Object%5D&name=%E6%96%87%E5%AD%97%E5%B1%9E%E6%80%A7%281%29.png&originHeight=643&originWidth=1013&size=80565&status=done&style=none&width=1013" alt="文字属性(1).png"></p>
<h1 id="CSS-布局"><a href="#CSS-布局" class="headerlink" title="CSS 布局"></a>CSS 布局</h1><h2 id="1、定位布局方式"><a href="#1、定位布局方式" class="headerlink" title="1、定位布局方式"></a>1、定位布局方式</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/437282/1566041226844-05a5e1b5-b639-4311-9393-09ac04737f3c.png#align=left&display=inline&height=398&margin=%5Bobject%20Object%5D&name=image.png&originHeight=478&originWidth=985&size=62977&status=done&style=none&width=820.8333007163485" alt="image.png"><br><strong>Position-static（默认定位）</strong></p>
<blockquote>
<p>浏览器会自动给所有的 DOM 元素，添加 <code>position: static</code> 属性。 <code>static</code>  遵循默认的文档流布局, <code>top、right、bottom、left</code> 等属性此时无用。</p>
</blockquote>
<p><strong>Position-relative（相对定位）</strong></p>
<blockquote>
<p><code>relative</code>  是相对于当前元素 <code>static</code>  布局位置进行的调整。它先遵循默认的文档流布局，然后再用 <code>top、right、bottom、left</code> 等属性进行位置调整。<br><code>z-index</code> 默认为 <code>0</code> 。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/437282/1597034377359-e865e326-dfb0-4dfb-827c-ebb244c4ef35.jpeg#align=left&display=inline&height=398&margin=%5Bobject%20Object%5D&originHeight=1593&originWidth=993&size=0&status=done&style=none&width=248" alt><br><strong>Position-absolute（绝对定位）</strong></p>
<blockquote>
<p><code>absolute</code>  是相对于<font color="red"><strong>最近非static定位祖先元素</strong></font>布局位置进行的调整。它脱离了默认的文档流布局，变为了第二图层，然后用 <code>top、right、bottom、left</code> 等属性来确定元素位置。<br><code>z-index</code> 默认为 <code>0</code> 。</p>
</blockquote>
<p><br><strong><code>absolute</code> 定位的元素会变为类似块状元素的元素， <code>width、height、padding、margin</code> 等都可以设置。</strong><br><strong><br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/437282/1597034880385-92219cbf-3af6-48e5-9a16-d5e38172742e.jpeg#align=left&display=inline&height=399&margin=%5Bobject%20Object%5D&originHeight=1593&originWidth=995&size=0&status=done&style=none&width=249" alt><br></strong>Position-fixed（固定布局）**</p>
<blockquote>
<p><code>fixed</code> 定位类似 <code>absolute</code> ，是相对于屏幕视口（viewport）进行的位置调整。它脱离了默认的文档流布局，用 <code>top、right、bottom、left</code> 等属性来确定元素位置。元素的位置在屏幕滚动时不会改变。</p>
</blockquote>
<h2 id="2、浮动布局方式"><a href="#2、浮动布局方式" class="headerlink" title="2、浮动布局方式"></a>2、浮动布局方式</h2><blockquote>
<p><code>float</code> 会脱离文档流，浮动到父元素的左侧或右侧位置。它常常会出现布局错乱现象，这种时候就需要通过清除浮动的方式来解决浮动元素的影响。</p>
</blockquote>
<h2 id="3、Flex布局方式"><a href="#3、Flex布局方式" class="headerlink" title="3、Flex布局方式"></a>3、Flex布局方式</h2><p><strong>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。</strong><br><strong>它的所有子元素称为 Flex 项目（flex item），简称”项目”。</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/jpg/437282/1597036845542-08306877-ee8e-4055-9b42-d3012e292885.jpg#align=left&display=inline&height=301&margin=%5Bobject%20Object%5D&originHeight=1204&originWidth=1644&size=0&status=done&style=none&width=411" alt><br><strong>Flex布局中有两条轴——主轴和交叉轴</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/437282/1597036951214-b04b678a-dd37-4c6f-8a06-13a843cc88d0.jpeg#align=left&display=inline&height=301&margin=%5Bobject%20Object%5D&originHeight=602&originWidth=822&size=0&status=done&style=none&width=411" alt></p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><font color="red">justify-content</font></td>
<td align="left">定义项目在主轴方向上的对齐方式。</td>
</tr>
<tr>
<td align="left"><font color="red">align-items</font></td>
<td align="left">定义项目在交叉轴方向上的对齐方式。</td>
</tr>
<tr>
<td align="left"><font color="red">flex-wrap</font></td>
<td align="left">定义项目溢出时换行方式。</td>
</tr>
<tr>
<td align="left"><font color="red">flex</font></td>
<td align="left">设置项目如何分配空间。</td>
</tr>
<tr>
<td align="left"><font color="red">flex-direction</font></td>
<td align="left">设置flex主轴方向。</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>注意：</strong>设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效</p>
</blockquote>
<h3 id="justify-content-和-align-items"><a href="#justify-content-和-align-items" class="headerlink" title="justify-content 和 align-items"></a>justify-content 和 align-items</h3><blockquote>
<p><code>justify-content</code> 和 <code>align-items</code> 是容器的属性，设置在容器上。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/437282/1597038348901-b7ea7eff-3d0a-4cd2-a3d5-290f8f5cec0b.jpeg#align=left&display=inline&height=472&margin=%5Bobject%20Object%5D&name=9.jpg&originHeight=1252&originWidth=1326&size=196131&status=done&style=none&width=500" alt="9.jpg"><br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/437282/1597038447784-6e4b2797-fb7d-447d-90c5-5c6cd127e815.jpeg#align=left&display=inline&height=472&margin=%5Bobject%20Object%5D&name=10.jpg&originHeight=1252&originWidth=1326&size=168483&status=done&style=none&width=500" alt="10.jpg"></p>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/jpg/437282/1597038530622-1adb967c-6eb9-42a9-8113-1cc74a61beb5.jpg#align=left&display=inline&height=642&margin=%5Bobject%20Object%5D&originHeight=1284&originWidth=884&size=0&status=done&style=none&width=442" alt></p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex: [flex-grow flex-shrink flex-basis] | auto | initial | inherit ;</code> <img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1597038772525-ac62ec5e-170f-4a63-be03-560a0720b136.png#align=left&display=inline&height=185&margin=%5Bobject%20Object%5D&name=image.png&originHeight=185&originWidth=1073&size=25338&status=done&style=none&width=1073" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1597039079782-be9200f5-10f0-491e-a726-c4c69afc8d29.png#align=left&display=inline&height=175&margin=%5Bobject%20Object%5D&name=1597038945188-0f43d343-c952-4e1d-82cc-646d9200c0a5.png&originHeight=175&originWidth=619&size=434264&status=done&style=none&width=619" alt="1597038945188-0f43d343-c952-4e1d-82cc-646d9200c0a5.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1597039213686-5079cc80-03f2-4451-8a44-435ffc481a9a.png#align=left&display=inline&height=177&margin=%5Bobject%20Object%5D&name=1597039107369-f84f2266-e51e-42fa-92c5-d8fd7bbdc485.png&originHeight=177&originWidth=613&size=434982&status=done&style=none&width=613" alt="1597039107369-f84f2266-e51e-42fa-92c5-d8fd7bbdc485.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1597039251451-abe19f9d-db58-4ad2-a4fb-931cb30fa4a6.png#align=left&display=inline&height=341&margin=%5Bobject%20Object%5D&name=image.png&originHeight=454&originWidth=658&size=32159&status=done&style=none&width=494" alt="image.png"></p>
<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/jpg/437282/1597039314580-aa913e22-95d7-4480-b879-a51b9904f229.jpg#align=left&display=inline&height=564&margin=%5Bobject%20Object%5D&originHeight=564&originWidth=1804&size=0&status=done&style=none&width=1804" alt></p>
<h1 id="CSS-高级"><a href="#CSS-高级" class="headerlink" title="CSS 高级"></a>CSS 高级</h1><h2 id="1、媒介查询"><a href="#1、媒介查询" class="headerlink" title="1、媒介查询"></a>1、媒介查询</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/437282/1597042797718-a0a87287-adbf-40aa-9449-bcdf8fcbbc98.jpeg#align=left&display=inline&height=456&margin=%5Bobject%20Object%5D&originHeight=911&originWidth=1197&size=0&status=done&style=none&width=599" alt></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>本地电脑部署博客步骤</title>
    <url>/2020/07/08/Hexo/%E6%9C%AC%E5%9C%B0%E7%94%B5%E8%84%91%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="一、本地安装Git"><a href="#一、本地安装Git" class="headerlink" title="一、本地安装Git"></a>一、本地安装Git</h1><p><br>在官网下载最新版本的git：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a><br></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查看git版本号</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>

<h1 id="二、本地配置SSH并绑定至GitHub"><a href="#二、本地配置SSH并绑定至GitHub" class="headerlink" title="二、本地配置SSH并绑定至GitHub"></a>二、本地配置SSH并绑定至GitHub</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;生成本地SSH</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br><span class="line">&#x2F;&#x2F;查询本地SSH</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>

<h1 id="三、本地安装node-js"><a href="#三、本地安装node-js" class="headerlink" title="三、本地安装node.js"></a>三、本地安装node.js</h1><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">下载地址</a><br></p>
<h1 id="四、本地安装hexo"><a href="#四、本地安装hexo" class="headerlink" title="四、本地安装hexo"></a>四、本地安装hexo</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">查阅文档</a><br>安装完node.js之后,我们就可以安装Hexo啦，在命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><br>局部安装 hexo 包，在命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure>


<h1 id="五、git-clone-到本地"><a href="#五、git-clone-到本地" class="headerlink" title="五、git clone 到本地"></a>五、git clone 到本地</h1><p>clone 远程仓库dev分支的代码到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b dev 仓库地址</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>SASS/SCSS</title>
    <url>/2020/08/10/CSS/SASS-SCSS/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p><strong>SASS 是一款 CSS 预编译器</strong>，它定义了一种新的编程语言，为CSS添加了一些编程的特性。SASS有变量、函数、控制语句、混用、嵌套等高级功能。<br>SASS有两种语法，一种是<strong>SCSS</strong>，另一种是类似yaml一样的<strong>缩进语法</strong>。</p>
<h1 id="SCSS语法"><a href="#SCSS语法" class="headerlink" title="SCSS语法"></a>SCSS语法</h1><h2 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 声明变量 */</span></span><br><span class="line">$width: 10px;</span><br><span class="line">	<span class="comment">/* 变量类型为字符串，一般不需要加引号，但是有些特殊情况*，比如字符串中有双斜杠“//”，</span></span><br><span class="line"><span class="comment">		就需要用英文输入法状态下的单引号或者双引号包裹字符串，用引号的写法 */</span></span><br><span class="line">$url: 'https://www.yuque.com/';</span><br><span class="line">	<span class="comment">/* 定义类似数组的遍量 */</span></span><br><span class="line">$animals: puppy kitty chick;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用变量 */</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: $width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: $width / <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">height</span>: $width * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、嵌套"><a href="#2、嵌套" class="headerlink" title="2、嵌套"></a>2、嵌套</h2><h3 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1597042054160-4fa4476d-cdbb-4124-b24d-d98514a5f578.png#align=left&display=inline&height=266&margin=%5Bobject%20Object%5D&name=image.png&originHeight=354&originWidth=652&size=91047&status=done&style=none&width=489" alt="image.png"></p>
<h3 id="父选择器-amp"><a href="#父选择器-amp" class="headerlink" title="父选择器 &amp;"></a>父选择器 &amp;</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1597042183281-45493093-692e-48b0-84f6-02eb25399b7a.png#align=left&display=inline&height=217&margin=%5Bobject%20Object%5D&name=image.png&originHeight=289&originWidth=653&size=65836&status=done&style=none&width=490" alt="image.png"></p>
<h2 id="3、复用"><a href="#3、复用" class="headerlink" title="3、复用"></a>3、复用</h2><p>无参数时</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> square &#123;</span><br><span class="line">  <span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line">  <span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 应用：</span><br><span class="line"><span class="selector-class">.user-avatar</span> &#123;</span><br><span class="line">  @include square;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.admin-avatar</span> &#123;</span><br><span class="line">  @include square;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参数无默认值时</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> square($size) &#123;</span><br><span class="line">  width: $size;</span><br><span class="line">  height: $size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 应用</span><br><span class="line"><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">  @include square(100px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参数有默认值时</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> square($<span class="attribute">size:</span> <span class="number">100px</span>,$<span class="attribute">lineHeight:</span> <span class="number">50px</span>) &#123;</span><br><span class="line">  width: $size;</span><br><span class="line">  height: $size;</span><br><span class="line">  line-height: $lineHeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 不传参数就会使用默认的值 100px</span><br><span class="line"><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">  @include square;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 传入参数就会使用传入的值 200px</span><br><span class="line"><span class="selector-class">.avatar-200</span> &#123;</span><br><span class="line">  @include square(200px,100px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h2><h3 id="插值法"><a href="#插值法" class="headerlink" title="插值法"></a>插值法</h3><p><code>#{}</code> 插值几乎可以在Sass样式表的任何地方使用：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$name: "mail";</span><br><span class="line">$top-or-bottom: "top";</span><br><span class="line">$left-or-right: "left";</span><br><span class="line"></span><br><span class="line">.icon-#&#123;$name&#125; &#123;</span><br><span class="line">  background-image: url("/icons/#&#123;$name&#125;.svg");</span><br><span class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">  #&#123;$top-or-bottom&#125;: 0;</span><br><span class="line">  #&#123;$left-or-right&#125;: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>css渐变</title>
    <url>/2020/08/09/CSS/css%E6%B8%90%E5%8F%98/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Using_CSS_gradients" target="_blank" rel="noopener">学习链接地址</a></p>
<h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><p>从某一个边界到另一个边界的颜色渐变</p>
<blockquote>
<ol>
<li>background：linear-gradient(red, blue); 从上到下</li>
<li>background：linear-gradient(to right, red, blue); 从左到右</li>
<li>background：linear-gradient(to bottom right, red, blue); 从左上到右下</li>
</ol>
<p><strong>0deg代表从上往下，90deg代表从左往右，-90deg代表从右往左</strong></p>
<ol>
<li><strong>background：linear-gradient(180deg, red, blue); 角度渐变</strong></li>
<li>background：linear-gradient(red 10%, green 85%, blue 90%); 多色渐变</li>
<li>background：linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1)); 透明度渐变</li>
<li>background：repeating-linear-gradient(red, yellow 10%, green 20%); 重复渐变</li>
</ol>
</blockquote>
<h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><p>从某一个点开始的向四周扩散的颜色渐变</p>
<blockquote>
<ol>
<li>background：radial-gradient(red, green, blue); 同比例</li>
<li>background：radial-gradient(red 5%, green 15%, blue 60%); 自定义比例</li>
<li>background：radial-gradient(circle, red, yellow, green); 环形径向渐变</li>
</ol>
</blockquote>
<p>实例：<code>background: radial-gradient(red 10px, yellow 30%, #1e90ff 50%);</code> <br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1596978141735-15f341e0-2bee-495c-bb38-13f623e7e749.png#align=left&display=inline&height=80&margin=%5Bobject%20Object%5D&name=image.png&originHeight=159&originWidth=160&size=12072&status=done&style=none&width=80" alt="image.png"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>css知识点</title>
    <url>/2020/07/31/CSS/css%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">


<h2 id="1、行内元素不能设置宽高"><a href="#1、行内元素不能设置宽高" class="headerlink" title="1、行内元素不能设置宽高"></a>1、行内元素不能设置宽高</h2><p>行内元素不能设置<code>width</code>和<code>height</code>,但可以设置<code>padding</code>。<br>行内元素可以设置左右 <code>margin</code> ,不可以设置上下 <code>margin</code> </p>
<h2 id="2、两个盒子之间margin的计算"><a href="#2、两个盒子之间margin的计算" class="headerlink" title="2、两个盒子之间margin的计算"></a>2、两个盒子之间margin的计算</h2><p><strong>水平距离：margin等于两者margin之和</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1596187549738-48b83058-91b5-4252-97d2-5d79b44f8666.png#align=left&display=inline&height=204&margin=%5Bobject%20Object%5D&originHeight=204&originWidth=1000&size=0&status=done&style=none&width=1000" alt><br><strong>垂直距离：margin取较大值</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1596187573244-93df2bab-a63e-474e-8590-6c5d10f48541.png#align=left&display=inline&height=378&margin=%5Bobject%20Object%5D&originHeight=378&originWidth=1000&size=0&status=done&style=none&width=1000" alt></p>
<h2 id="3、空白折叠现象"><a href="#3、空白折叠现象" class="headerlink" title="3、空白折叠现象"></a>3、空白折叠现象</h2><p>我们将 <code>div</code> 的 <code>display</code> 属性从 <code>block</code> 切换成 <code>inline-block</code> 之后，我们希望得到的效果是这样的:<br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1596187907799-97bbd30c-6173-4df1-9942-8f94710e55cc.png#align=left&display=inline&height=59&margin=%5Bobject%20Object%5D&name=image.png&originHeight=78&originWidth=374&size=890&status=done&style=none&width=281" alt="image.png"><br>但是得到的结果却是这样的：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1596187942637-da61d1e4-4be5-40b1-bb72-068fb3c53111.png#align=left&display=inline&height=53&margin=%5Bobject%20Object%5D&name=image.png&originHeight=70&originWidth=493&size=972&status=done&style=none&width=370" alt="image.png"><br>两个盒子中间多了一点空白，但是我们并没有设置margin，这就是传说中的<font color="red"><strong>空白折叠</strong></font>现象。<br>其原因就是因为两个 div 之间多了一个回车，在html中，回车被当作是一个文字，所以这里的空白就是文字的空白，相当于在两个div之间加了一个字母。<br><strong>解决方案：给父元素设置font-size为0；</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff2cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b0e3e6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、margin问题"><a href="#4、margin问题" class="headerlink" title="4、margin问题"></a>4、margin问题</h2><p><strong>兄弟之间的margin</strong></p>
<blockquote>
<p>我们之间最常用的应该是这种兄弟之间的margin</p>
</blockquote>
<p><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1596527293425-9e1ab01c-dcb7-42da-9148-2f8aa7211546.png#align=left&display=inline&height=364&margin=%5Bobject%20Object%5D&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200804154725.png&originHeight=364&originWidth=1430&size=45445&status=done&style=none&width=1430" alt="微信图片_20200804154725.png"></strong><br><strong>父子之间的margin</strong><br>分为两种情况：父元素有border和没有border时<br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1596527477051-15bfa7b0-832f-45c6-88d4-1afca5ea7818.png#align=left&display=inline&height=134&margin=%5Bobject%20Object%5D&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200804155102.png&originHeight=534&originWidth=1050&size=25451&status=done&style=none&width=263" alt="微信图片_20200804155102.png"></p>
<blockquote>
<p>如上图所示，纸箱靠墙，人在纸箱里，<br>给人设置margin-top就相当于人在往上踹，这时有两种结果，</p>
<ol>
<li>一种就是纸箱的上边没有纸箱壁（也就是没有border-top），此时人往上踹，踹到的是墙，所以<strong>纸箱会跟着人一起往下跑</strong>。</li>
<li>纸箱有上纸箱壁（有border-top），此时人往上踹，人会因为反作用力，远离纸箱壁，而<strong>纸箱并没有动</strong>。</li>
</ol>
</blockquote>
<p>同样的道理理解margin-bottom失效原因即可。</p>
<h2 id="5、选择器优先级问题"><a href="#5、选择器优先级问题" class="headerlink" title="5、选择器优先级问题"></a>5、选择器优先级问题</h2><h3 id="（1）单个选择器"><a href="#（1）单个选择器" class="headerlink" title="（1）单个选择器"></a>（1）单个选择器</h3><blockquote>
<p><strong>单个选择器的优先级顺序：id 选择器&gt;类选择器&gt;标签选择器</strong></p>
</blockquote>
<h3 id="（2）高级选择器的优先级"><a href="#（2）高级选择器的优先级" class="headerlink" title="（2）高级选择器的优先级"></a>（2）高级选择器的优先级</h3><p>高级选择器的优先级由权重决定。权重的作用就是决定当用<strong>两个不同的选择器</strong>给<strong>同一个标签</strong>设置了相同的属性，该听谁的。</p>
<blockquote>
<p>假设 id 选择器的权重为 100，类选择器的权重为 10，标签选择器的权重为 1。<br><code>.param #item span{}</code> 该选择器的权重为：10+100+1=111<br><code>#item1 #item2 .param1 .param2 p span {}</code> 该选择器的权重为：200+20+2=222</p>
</blockquote>
<h2 id="6、文字属性的继承性"><a href="#6、文字属性的继承性" class="headerlink" title="6、文字属性的继承性"></a>6、文字属性的继承性</h2><p>例如<code>font-size</code>(文字大小)、<code>font-weight</code>(文字粗细)、<code>font-family</code>(字体)、<code>color</code>(文字颜色)等属性属于文字属性，子类标签会继承的是离它最近的一个父类标签的文字属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul-item"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>文字的颜色到底是什么颜色？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ul-item</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff6973</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像这样，p标签父类的父类定义了字体颜色为<code>#ff6973</code>,p标签自己又没有定义颜色,此时p标签的颜色就是<code>#ff6873</code>。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>初识Hexo</title>
    <url>/2020/07/08/Hexo/%E5%88%9D%E8%AF%86Hexo/</url>
    <content><![CDATA[<h1 id="一、Hexo定义"><a href="#一、Hexo定义" class="headerlink" title="一、Hexo定义"></a>一、Hexo定义</h1><p>hexo是一个快速、简洁且高效的博客框架，它支持几条简短的命令发布博客，因此是对于初学者比较友好的博客框架。</p>
<h1 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h1><p><a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo" target="_blank" rel="noopener">hexo的安装</a></p>
<ol>
<li>安装<strong>Node.js</strong>和<strong>Git</strong></li>
<li>然后使用npm安装Hexo<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li>局部安装 <code>hexo</code> 包<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>安装以后，可以使用以下两种方式执行 Hexo命令：</p>
<ol>
<li><code>npx hexo &lt;command&gt;</code></li>
<li>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo ：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;PATH&#x3D;&quot;$PATH:.&#x2F;node_modules&#x2F;.bin&quot;&#39; &gt;&gt; ~&#x2F;.profile</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="三、创建博客文件夹"><a href="#三、创建博客文件夹" class="headerlink" title="三、创建博客文件夹"></a>三、创建博客文件夹</h1><p>进入某目录，执行如下命令创建博客文件夹：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在当前目录下创建一个叫blog的博客文件夹</span><br><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<h1 id="四、安装发布工具"><a href="#四、安装发布工具" class="headerlink" title="四、安装发布工具"></a>四、安装发布工具</h1><p>进入博客目录（<code>cd blog</code>），打开控制台，输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>


<h1 id="五、修改配置文件"><a href="#五、修改配置文件" class="headerlink" title="五、修改配置文件"></a>五、修改配置文件</h1><p>找到blog文件夹中的<code>_config.yml</code>文件，输入如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: landscape</span><br><span class="line">deploy:</span><br><span class="line">  type: git  </span><br><span class="line">  repository: git@github.com:sterben110&#x2F;sterben110.github.io.git  </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h1 id="六、Hexo提交"><a href="#六、Hexo提交" class="headerlink" title="六、Hexo提交"></a>六、Hexo提交</h1><h2 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a>hexo generate</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>作用是生成新的静态文件,可以简写为<code>hexo g</code></p>
<h2 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>作用是把生成的文件部署到我们的博客上，可以简写为<code>hexo d</code>，发布后，我们就可以看到我们的博客变成了这样：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1594185106908-7ab390a4-e0fc-45bc-a0c0-4b04b20d7392.png#align=left&display=inline&height=326&margin=%5Bobject%20Object%5D&originHeight=1302&originWidth=2524&size=0&status=done&style=none&width=631" alt></p>
<h2 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>用途是清除缓存，能让新发布的博客能快速生效</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2020/07/25/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h2><blockquote>
<p>对于一个数组，在每次循环中，遍历<font color="red"><strong>剩余数组</strong></font>时，对比两个相邻的元素，前大后小则交换位置，遍历结束时<font color="red"><strong>最大值</strong></font>就会冒泡排至最后面。然后缩短剩余数组继续遍历</p>
</blockquote>
<p>如下图，剩余数组为【2,4,7,5,3】,每次比较相邻元素，大的交换至后面直至遍历结束，得到缩短后的剩余数组为【2,4,5,3】。<br><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1595657732836-ebfe8873-1bec-4287-87ac-3ade5db4047a.svg#align=left&display=inline&height=150&margin=%5Bobject%20Object%5D&originHeight=252&originWidth=362&size=0&status=done&style=none&width=215" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1595657840279-46b935ac-c917-4e60-82e5-aa047d96b461.svg#align=left&display=inline&height=150&margin=%5Bobject%20Object%5D&originHeight=252&originWidth=362&size=0&status=done&style=none&width=215" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1595657871852-06cae7a6-195c-42f5-90ae-a0972d9d8588.svg#align=left&display=inline&height=150&margin=%5Bobject%20Object%5D&originHeight=297&originWidth=362&size=0&status=done&style=none&width=183" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1595657900975-7a13d800-a1ad-4f47-957a-f05e36c4a0d7.svg#align=left&display=inline&height=250&margin=%5Bobject%20Object%5D&originHeight=392&originWidth=371&size=0&status=done&style=none&width=237" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 冒泡排序(升序)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 每次循环，都能冒泡出剩余元素中最大的元素，因此需要循环 array.length 次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 2. 每次遍历，只需要遍历 0 到 array.length - i - 1中元素，因此之后的元素都已经是最大的了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//3. 交换元素</span></span><br><span class="line">            <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = array[j + <span class="number">1</span>];</span><br><span class="line">                array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">                array[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h2><blockquote>
<p>重点在<font color="red"><strong>选择</strong></font>，在每次循环中，遍历<font color="red"><strong>剩余数组</strong></font>获取<font color="red"><strong>最大值</strong></font>，放在数组最后。然后缩短剩余数组继续遍历</p>
</blockquote>
<p>如下图，剩余数组为【3,2,4,7,5】，遍历该数组，得到最大值为 7 ,交换7、5（数组末尾元素），得到缩短后的剩余数组为【3,2,4,5】。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1595656929528-0fef4a12-0bde-48b7-b3f3-dd4a9a8a03b3.png#align=left&display=inline&height=140&margin=%5Bobject%20Object%5D&name=image.png&originHeight=140&originWidth=262&size=9238&status=done&style=none&width=262" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选择排序(升序)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="comment">//最大值索引</span></span><br><span class="line">    <span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意 j 从 索引1 开始，到 array.length - i 截止</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; array.length - i; j++) &#123;</span><br><span class="line">      <span class="comment">//若当前元素大于最大值，则替换最大值</span></span><br><span class="line">      <span class="keyword">if</span> (array[j] &gt; array[maxIndex]) &#123;</span><br><span class="line">        maxIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换最大值元素 和 数组末尾元素</span></span><br><span class="line">    <span class="keyword">int</span> temp = array[maxIndex];</span><br><span class="line">    array[maxIndex] = array[array.length - i - <span class="number">1</span>];</span><br><span class="line">    array[array.length - i - <span class="number">1</span>] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h2><p>时间复杂度徘徊在 <code>O(N)~O(N^2)</code> </p>
<blockquote>
<p>重点在<font color="red"><strong>插入</strong></font>，在每次循环中，抽离出一个<font color="red"><strong>临时元素</strong></font>，遍历临时元素的<font color="red"><strong>右侧数组</strong></font>，寻找插入位置。</p>
</blockquote>
<p>如下图，临时元素为4，遍历【3,5,7】数组寻找到插入位置为3、5之间，3左移一位，5、7不动。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1595656477902-26d815df-ba62-45fa-8e83-3ba86f22ca60.png#align=left&display=inline&height=88&margin=%5Bobject%20Object%5D&name=image.png&originHeight=91&originWidth=309&size=9491&status=done&style=none&width=300" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入排序(升序)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 从倒数第二位开始，遍历到底0位，遍历 N-1 次</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">// 存储当前抽离的临时元素</span></span><br><span class="line">    <span class="keyword">int</span> temp = array[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="comment">//遍历抽离元素的右侧数组，寻找插入位置</span></span><br><span class="line">    <span class="keyword">for</span>(j = i+<span class="number">1</span>;j&lt;array.length;j++)&#123;</span><br><span class="line">        <span class="comment">// 若临时元素大于当前元素，则这个元素左移</span></span><br><span class="line">      <span class="keyword">if</span> (array[j] &lt; temp) &#123;</span><br><span class="line">        array[j - <span class="number">1</span>] = array[j];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果临时元素小于当前元素，则将临时元素插入该元素之前，然后退出循环。</span></span><br><span class="line">        array[j - <span class="number">1</span>] = temp;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理到达尾部的情况</span></span><br><span class="line">    <span class="keyword">if</span> (j == array.length) &#123;</span><br><span class="line">      array[j - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-1、二分插入排序"><a href="#3-1、二分插入排序" class="headerlink" title="3.1、二分插入排序"></a>3.1、二分插入排序</h3><blockquote>
<p>与普通插入排序的区别在于，普通的插入排序在寻找4的插入位置采用的是<font color="red"><strong>遍历数组</strong></font>，二分插入排序在寻找4的插入位置时用的是<font color="red"><strong>二分查找法。</strong></font></p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1595656477902-26d815df-ba62-45fa-8e83-3ba86f22ca60.png#align=left&display=inline&height=88&margin=%5Bobject%20Object%5D&name=image.png&originHeight=91&originWidth=309&size=9491&status=done&style=none&width=300" alt="image.png"><br></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从倒数第二位开始，遍历到底0位，遍历 N-1 次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 存储当前抽离的元素</span></span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        <span class="keyword">int</span> index = searchIndex(array, i + <span class="number">1</span>, array.length - <span class="number">1</span>, temp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// #1. 根据插入的索引位置，进行数组的移动和插入</span></span><br><span class="line">        <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= index) &#123;</span><br><span class="line">            array[j - <span class="number">1</span>] = array[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        array[j - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1595658546381-4fc14a85-fc95-4b2c-9efe-2a1865430c58.svg#align=left&display=inline&height=301&margin=%5Bobject%20Object%5D&originHeight=301&originWidth=635&size=0&status=done&style=none&width=635" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找应该插入的索引位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">searchIndex</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> aim)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 循环查找节点位置</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> value = array[middle];</span><br><span class="line">        <span class="keyword">if</span> (value &lt; aim) &#123;</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// #1. 如果最终元素仍然大于目标元素，则将索引位置往左边移动一个</span></span><br><span class="line">    <span class="keyword">if</span>(array[left] &gt; aim)&#123;</span><br><span class="line">        <span class="keyword">return</span> left -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则就是当前位置</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、冒泡排序VS选择排序VS插入排序"><a href="#4、冒泡排序VS选择排序VS插入排序" class="headerlink" title="4、冒泡排序VS选择排序VS插入排序"></a>4、冒泡排序VS选择排序VS插入排序</h2><blockquote>
<p>冒泡排序相比较而言肯定是较差的。<br>选择排序和插入排序得分情况而定，如果<font color="red"><strong>原始数组本身有很多元素按希望的顺序排好序</strong></font>，则选择<font color="red"><strong>插入排序</strong></font>，否则选择<font color="red"><strong>选择排序</strong></font>。</p>
</blockquote>
<h2 id="5、归并排序（递归）"><a href="#5、归并排序（递归）" class="headerlink" title="5、归并排序（递归）"></a>5、归并排序（递归）</h2><p>时间复杂度为 <code>O(N*LogN)</code></p>
<blockquote>
<p>将大数组分解成小数组，将每个小数组排好序，再将这些有序的小数组合并成大数组。</p>
</blockquote>
<p><br><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1596010421927-2bc756e3-1a20-41ea-9687-8367ab7e5964.svg#align=left&display=inline&height=351&margin=%5Bobject%20Object%5D&originHeight=702&originWidth=782&size=0&status=done&style=none&width=391" alt><br>小数组合并<br><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1596010582073-f7a02079-90d5-41d9-a913-2253075a6faf.svg#align=left&display=inline&height=199&margin=%5Bobject%20Object%5D&originHeight=332&originWidth=501&size=0&status=done&style=none&width=300" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 归并排序</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="comment">// 为了方便查看结果，我们将每个数组进行打印</span></span><br><span class="line">    <span class="keyword">if</span> (array.length == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> middle = array.length / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 处理 0 到 middle 左侧数组部分</span></span><br><span class="line">    <span class="keyword">int</span>[] left = mergeSort(subArray(array, <span class="number">0</span>, middle));</span><br><span class="line">    <span class="comment">// 处理 middle 到 array.length 右侧数组部分</span></span><br><span class="line">    <span class="keyword">int</span>[] right = mergeSort(subArray(array, middle, array.length));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左侧数组指针</span></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//右侧数组指针</span></span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; left.length &amp;&amp; r &lt; right.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left[l] &lt; right[r]) &#123;</span><br><span class="line">        array[index++] = left[l++];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        array[index++] = right[r++];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左侧数组先遍历完时</span></span><br><span class="line">    <span class="keyword">while</span> (r &lt; right.length) &#123;</span><br><span class="line">      array[index++] = right[r++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//右侧数组先遍历完时</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; left.length) &#123;</span><br><span class="line">      array[index++] = left[l++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拷贝原数组的部分内容，从 left 到 right</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] subArray(<span class="keyword">int</span>[] source, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line">    <span class="comment">// 创建一个新数组</span></span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[right - left];</span><br><span class="line">    <span class="comment">// 依次赋值进去</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt; right; i++) &#123;</span><br><span class="line">      result[i - left] = source[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line">## 6、快速排序（递归）</span><br><span class="line">时间复杂度为 `O(N*LogN)~O(N^<span class="number">2</span>)`&lt;br /&gt;轴分区思想</span><br><span class="line">&gt; (<span class="number">1</span>) 左指针依次往右侧移动，当遇到大于或者等于轴<span class="number">3</span>的值，则停止</span><br><span class="line">&gt; (<span class="number">2</span>) 右指针相反，依次往左侧移动，当遇到小于或者等于轴<span class="number">3</span>的值，则停止</span><br><span class="line">&gt; (<span class="number">3</span>) 将左右两个指针指向的值进行互换</span><br><span class="line">&gt; (<span class="number">4</span>) 互换以后，然后继续按照上面（<span class="number">1</span>）- （<span class="number">3</span>）执行，直到左指针和右指针重叠。</span><br><span class="line">&gt; (<span class="number">5</span>) 将左右两个指针指向的值和轴<span class="number">3</span>互换</span><br><span class="line"></span><br><span class="line">通过每次轴分区，都能完成轴的位置定位。&lt;br /&gt;![](https:<span class="comment">//cdn.nlark.com/yuque/0/2020/svg/437282/1596011314151-8dda706c-affc-4cc0-8b69-37afe0d1a62e.svg#align=left&amp;display=inline&amp;height=241&amp;margin=%5Bobject%20Object%5D&amp;originHeight=241&amp;originWidth=515&amp;size=0&amp;status=done&amp;style=none&amp;width=515)&lt;br /&gt;![](https://cdn.nlark.com/yuque/0/2020/svg/437282/1596011570310-40af284b-af40-43e2-aac3-254eb80f772d.svg#align=left&amp;display=inline&amp;height=281&amp;margin=%5Bobject%20Object%5D&amp;originHeight=281&amp;originWidth=352&amp;size=0&amp;status=done&amp;style=none&amp;width=352)&lt;br /&gt;</span></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用快速排序的核心，传入left，right</span></span><br><span class="line">    quickSortCore(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 快速排序的核心，同样也是递归函数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSortCore</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 递归基准条件，left &gt;= right 即表示数组只有1个或者0个元素。</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据轴分区</span></span><br><span class="line">    <span class="keyword">int</span> pivotIndex = partition(array, left, right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归调用左侧和右侧数组分区</span></span><br><span class="line">    quickSortCore(array, left, pivotIndex - <span class="number">1</span>);</span><br><span class="line">    quickSortCore(array, pivotIndex + <span class="number">1</span>, right);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对数组进行分区，并返回当前轴所在的位置</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//轴值，取数组末尾元素</span></span><br><span class="line">    <span class="keyword">int</span> value = array[right];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左右指针</span></span><br><span class="line">    <span class="keyword">int</span> leftIndex = left;</span><br><span class="line">    <span class="keyword">int</span> rightIndex = right - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (array[leftIndex] &lt; value &amp;&amp; leftIndex &lt; right) &#123;</span><br><span class="line">        leftIndex++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (array[rightIndex] &gt; value &amp;&amp; rightIndex &gt;= left) &#123;</span><br><span class="line">        rightIndex--;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (leftIndex &lt; rightIndex) &#123;</span><br><span class="line">        swap(array, leftIndex, rightIndex);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//左右指针重叠时</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    swap(array, leftIndex, right);</span><br><span class="line">    <span class="keyword">return</span> leftIndex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = array[index1];</span><br><span class="line">    array[index1] = array[index2];</span><br><span class="line">    array[index2] = temp;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2020/07/11/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="一、动态规划步骤"><a href="#一、动态规划步骤" class="headerlink" title="一、动态规划步骤"></a>一、动态规划步骤</h2><p>1、确定公式自变量，确定函数值的含义<br>2、明确公式<br>3、代码编写<br>（1）考虑特殊情况<br>（2）加入缓存<br>（3）将公式代码化<br>（4）存储缓存（缓存一般为键值对，键存自变量，值存相应的函数值）</p>
<h2 id="二、经典案例"><a href="#二、经典案例" class="headerlink" title="二、经典案例"></a>二、经典案例</h2><h3 id="1、钞票凑数问题"><a href="#1、钞票凑数问题" class="headerlink" title="1、钞票凑数问题"></a>1、钞票凑数问题</h3><blockquote>
<p>假设有11元、5元、1元面额的钞票，如何凑出15元使得钞票数量最少？</p>
</blockquote>
<p>我们用<strong>f(M)</strong>来表示<strong>凑出 M 所需的最少钞票数量</strong>，以上情况可表示为：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1594446749488-bd8945f6-b875-4bdd-80bb-f84e5da33874.png#align=left&display=inline&height=108&margin=%5Bobject%20Object%5D&originHeight=216&originWidth=819&size=0&status=done&style=none&width=410" alt><br><br><br>则该问题的公式可概括为：<br><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1594446986811-e97f8502-606b-45df-a1e2-af4390f709b1.svg#align=left&display=inline&height=22&margin=%5Bobject%20Object%5D&originHeight=22&originWidth=479&size=0&status=done&style=none&width=479" alt><br>加入缓存后的代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找最少的钞票数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// #1 处理边界情况</span></span><br><span class="line">	<span class="keyword">if</span> (m &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">       </span><br><span class="line">	<span class="comment">// #2 加入缓存</span></span><br><span class="line">	<span class="keyword">if</span>(map.containsKey(m))&#123;</span><br><span class="line">	  <span class="keyword">return</span> map.get(m);</span><br><span class="line">	&#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// #3 处理公式</span></span><br><span class="line">       <span class="comment">// 取 1 、5、11的最小钞票书数</span></span><br><span class="line">	<span class="keyword">int</span> min = Math.min(f(m - <span class="number">1</span>), f(m - <span class="number">5</span>));</span><br><span class="line">	min = Math.min(min, f(m - <span class="number">11</span>));</span><br><span class="line">       </span><br><span class="line">	<span class="comment">// #3 存储缓存</span></span><br><span class="line">       <span class="comment">//m代表函数自变量，min+1为函数值</span></span><br><span class="line">	map.put(m, min + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> min + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、背包放财宝问题"><a href="#2、背包放财宝问题" class="headerlink" title="2、背包放财宝问题"></a>2、背包放财宝问题</h3><blockquote>
<p>假设我们有一个背包可以容纳10KG的物品，现在有 5 个物品，重量分别为2、2、6、5、4，他们的价值分别是6、3、5、4、6。每个物品只有一件，也就是要么取要么不取。请问，怎么装背包，才能带走更多的财富？</p>
</blockquote>
<p>我们将<strong>f(w)</strong>表示<strong>在w 重量的背包下，获取到的最大价值。</strong></p>
<blockquote>
<p>如果取第一个物品，<strong>f(w) = 6 + f(w-2)</strong> 其中 6 是第一个物品的价值，f(w-2)表示放置了第一个物品之后的最优解。<br>如果取第二个物品，f(w) = 3 + f(w-2)<br>如果取第三个物品，f(w) = 5 + f(w-6)<br>如果取第四个物品，f(w) = 4 + f(w-5)<br>如果取第五个物品，f(w) = 6 + f(w-4)</p>
</blockquote>
<p>而我们需要取的是上述 5 种情况的最大值，也就是公式如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1594448392744-2299eb65-3a08-4274-931e-114aa2761f26.svg#align=left&display=inline&height=18&margin=%5Bobject%20Object%5D&originHeight=18&originWidth=557&size=0&status=done&style=none&width=557" alt><br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最找背包最优装法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span>[][] objects)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 当重量小于或者等于0的时候，返回0</span></span><br><span class="line">	<span class="keyword">if</span> (w &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	String key = w + <span class="string">"-"</span> + Arrays.toString(objects);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 优先从缓存中获取</span></span><br><span class="line">	<span class="keyword">if</span> (hashMap.containsKey(key)) &#123;</span><br><span class="line">		<span class="keyword">return</span> hashMap.get(key);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 化简为子问题</span></span><br><span class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span>[] object = objects[i];</span><br><span class="line">		<span class="keyword">int</span> weight = object[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> money = object[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> canGet = object[<span class="number">2</span>];</span><br><span class="line">		<span class="comment">// #2. 如果已经被获取，则跳过</span></span><br><span class="line">		<span class="keyword">if</span> (canGet == <span class="number">1</span>) &#123;</span><br><span class="line">		  <span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// #1.只有空间足够放才往下面进行</span></span><br><span class="line">		<span class="keyword">if</span> (w &gt;= weight) &#123;</span><br><span class="line">		  <span class="comment">// #3. 在取用之间进行设置，取用之后进行恢复</span></span><br><span class="line">		  object[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">			max = Math.max(max, f(w - weight, objects) + money);</span><br><span class="line">			object[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	hashMap.put(key, max);</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、台阶问题"><a href="#3、台阶问题" class="headerlink" title="3、台阶问题"></a>3、台阶问题</h3><blockquote>
<p>有一个高度是 10 级的台阶，从下往上走，每跨一步只能向上 1 级或者 2 级台阶。求出一共有多少种走法？</p>
</blockquote>
<p>我们将<strong>f(s)</strong>表示<strong>在s级台阶下的走法数。</strong><br>公式如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1594452385600-ae57d35f-69b8-4b8d-a62c-fea5b6f9a370.png#align=left&display=inline&height=27&margin=%5Bobject%20Object%5D&name=image.png&originHeight=54&originWidth=392&size=4167&status=done&style=none&width=196" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap &lt; Integer, Integer &gt; cache = <span class="keyword">new</span> HashMap &lt; &gt; ();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 求stepNum级楼梯走法数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> stepNum)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//处理边界情况</span></span><br><span class="line">	<span class="comment">// 没有楼梯</span></span><br><span class="line">	<span class="keyword">if</span> (stepNum &lt; <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 楼梯为1阶v</span></span><br><span class="line">	<span class="keyword">if</span> (stepNum == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 楼梯为2阶</span></span><br><span class="line">	<span class="keyword">if</span> (stepNum == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (cache.containsKey(stepNum)) &#123;</span><br><span class="line">		<span class="keyword">return</span> cache.get(stepNum);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> sum = f(stepNum - <span class="number">1</span>) + f(stepNum - <span class="number">2</span>);</span><br><span class="line">	cache.put(stepNum, sum);</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、打家劫舍的例子"><a href="#4、打家劫舍的例子" class="headerlink" title="4、打家劫舍的例子"></a>4、打家劫舍的例子</h3><blockquote>
<p>现在你是一个专业的小偷，计划偷窃沿街的房屋。每个房间里都有一定的现金，影响你偷窃的唯一制约是两个相邻的房间装有互相连同通的防盗系统，也就是<strong>如果两个相邻的房间在同一晚上被小偷盗窃，系统会自动报警。</strong>请在不触动警报装置的情况下，如何盗窃到最高金额的现金?</p>
</blockquote>
<p>我们将<strong>f(index)</strong>表示<strong>从第index个房间开始从右向左盗窃的最高金额。</strong><br>情况表示如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1594452357561-664494e7-493d-477b-9784-6a3da2576b2a.png#align=left&display=inline&height=52&margin=%5Bobject%20Object%5D&name=image.png&originHeight=103&originWidth=771&size=23444&status=done&style=none&width=385.5" alt="image.png"><br>公式如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1594452258480-d3b51f5f-38d5-4482-9081-d2e7b5d64b4d.png#align=left&display=inline&height=28&margin=%5Bobject%20Object%5D&name=image.png&originHeight=56&originWidth=770&size=12748&status=done&style=none&width=385" alt="image.png"><br>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入（房间依次现金）: [1,2,3,1]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 偷窃 1 号房屋 (金额 &#x3D; 1) ，然后偷窃 3 号房屋 (金额 &#x3D; 3)。偷窃到的最高金额 &#x3D; 1 + 3 &#x3D; 4 。</span><br><span class="line"></span><br><span class="line">输入: [2,7,9,3,1]</span><br><span class="line">输出: 12</span><br><span class="line">解释: 偷窃 1 号房屋 (金额 &#x3D; 2), 偷窃 3 号房屋 (金额 &#x3D; 9)，接着偷窃 5 号房屋 (金额 &#x3D; 1)。     偷窃到的最高金额 &#x3D; 2 + 9 + 1 &#x3D; 12 。</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> HashMap &lt; Integer, Integer &gt; cache = <span class="keyword">new</span> HashMap &lt; &gt; ();</span><br><span class="line"> 	<span class="comment">// 一夜之间获取的最高现金</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>[] rooms)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 每次调用的时候，将cache情况</span></span><br><span class="line">	cache.clear();</span><br><span class="line">	<span class="comment">// 从右侧开始考虑是否偷盗，有新的思路也可以按照自己思路来</span></span><br><span class="line">	<span class="keyword">return</span> fCore(rooms, rooms.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fCore</span><span class="params">(<span class="keyword">int</span>[] rooms, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 处理边界情况</span></span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> rooms[index];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cache.containsKey(index)) &#123;</span><br><span class="line">		<span class="keyword">return</span> cache.get(index);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 最后一个房间偷或者不偷两种情况。</span></span><br><span class="line">	<span class="keyword">int</span> max = Math.max(fCore(rooms, index - <span class="number">1</span>), fCore(rooms, index - <span class="number">2</span>) + rooms[index]);</span><br><span class="line">	cache.put(index, max);</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>复杂度</title>
    <url>/2020/07/25/%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">


<h2 id="1、大O记法（复杂度）"><a href="#1、大O记法（复杂度）" class="headerlink" title="1、大O记法（复杂度）"></a>1、大O记法（复杂度）</h2><p>复杂度，又被称为<font color="red"><strong>大O记法</strong></font>，用于在进行测试之前粗略<font color="red"><strong>估计算法执行效率</strong></font>的方法。<br>在测试结果能判断算法执行效率的情况下，使用复杂度的原因：</p>
<ul>
<li>测试结果受硬件条件影响很大</li>
<li>测试结果必须在程序可运行时才能拿到</li>
<li>测试数据不够多，不具有统计学上的意义</li>
</ul>
<h2 id="2、时间复杂度"><a href="#2、时间复杂度" class="headerlink" title="2、时间复杂度"></a>2、时间复杂度</h2><p><font color="red" size="4"><strong>大 O 记法，只保留最大趋势公式，指数 &gt; 线性 &gt; 对数 &gt; 常数。</strong></font><br><br>计算<font color="red" size="4"><strong>时间复杂度</strong></font>，只需要<font color="red" size="4"><strong>关注for 循环嵌套情况</strong></font>。<br>写代码的时候，如果能用<strong>线性复杂度</strong>的代码，替换<strong>指数复杂度</strong>的代码，那就是大大的优化。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>Java是如何运行的</title>
    <url>/2020/07/15/Java/Java%E5%9F%BA%E7%A1%80/Java%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="一、什么是编程语言"><a href="#一、什么是编程语言" class="headerlink" title="一、什么是编程语言"></a>一、什么是编程语言</h2><p>Java 是一种高级语言，有“高级语言”自然也有“低级语言”，一般计算机世界里把“低级语言”叫做机器语言或者汇编语言。计算机<font color="red"><strong>只能运行低级语言</strong></font>，所以<font color="red"><strong>高级语言编写的程序必须先被翻译成低级语言才能运行</strong></font>。<br><font color="red"><strong>高级语言的优点</strong></font>有很多：更容易编程、更容易阅读和修改、<font color="red"><strong>可移植性高</strong></font>；低级语言只能在一种计算机上运行。</p>
<h2 id="二、Java语言的执行"><a href="#二、Java语言的执行" class="headerlink" title="二、Java语言的执行"></a>二、Java语言的执行</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1594785283558-6833f28a-67d6-40f9-b2ab-54ab51ae1885.svg#align=left&display=inline&height=98&margin=%5Bobject%20Object%5D&originHeight=98&originWidth=765&size=0&status=done&style=none&width=765" alt><br>Java 既可以被编译也可以被解释，不同的是<font color="red"><strong>Java 编译</strong></font>过程并不生成机器语言，而是<font color="red"><strong>生成字节码</strong></font>。<font color="red"><strong>字节码</strong></font>和机器语言一样，但是它<font color="red"><strong>具备高级语言的可移植性</strong></font>。JVM （Java virtual machine ，Java 虚拟机）支持了对<font color="red"><strong>字节码的解释运行</strong></font>。</p>
<h2 id="三、Java代码的注释"><a href="#三、Java代码的注释" class="headerlink" title="三、Java代码的注释"></a>三、Java代码的注释</h2><h3 id="1、块注释"><a href="#1、块注释" class="headerlink" title="1、块注释"></a>1、块注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 	我是块注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="2、行注释"><a href="#2、行注释" class="headerlink" title="2、行注释"></a>2、行注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我是行注释</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java注意点</title>
    <url>/2020/07/16/Java/Java%E5%9F%BA%E7%A1%80/Java%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、数组初始化注意事项"><a href="#1、数组初始化注意事项" class="headerlink" title="1、数组初始化注意事项"></a>1、数组初始化注意事项</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br></pre></td></tr></table></figure>
<p>上面的代码的目的就是做了一个数组的初始化，这个初始化的作用就是开辟了该长度的存储空间。<strong>数组初始化完后</strong>，并没有存储实际的值，<strong>int 类型的数据默认值是 0</strong>,<strong>String 类型的数据默认值是 null</strong>。</p>
<h2 id="2、循环"><a href="#2、循环" class="headerlink" title="2、循环"></a>2、循环</h2><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><p>增强<code>for</code>循环是<code>JDK1.5</code>以后出来的一个高级<code>for</code>循环，专门用来遍历数组和集合的。它的内部原理其实是个<code>Iterator</code>迭代器，所以在遍历的过程中，<strong>不能对集合中的元素进行增删操作</strong>。<br>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素的数据类型 变量 : Collection集合or数组)&#123;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历数组的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n : arr) &#123;</span><br><span class="line">    <span class="comment">//变量n代表被遍历到的数组元素</span></span><br><span class="line">    System.out.println(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历Collection集合的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">coll.add(<span class="string">"a1"</span>);</span><br><span class="line">coll.add(<span class="string">"a2"</span>);</span><br><span class="line">coll.add(<span class="string">"a3"</span>);</span><br><span class="line">coll.add(<span class="string">"a4"</span>);</span><br><span class="line"><span class="keyword">for</span>(String str : coll)&#123;</span><br><span class="line">    <span class="comment">//变量Str代表被遍历到的集合元素</span></span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、字符串分割注意点"><a href="#3、字符串分割注意点" class="headerlink" title="3、字符串分割注意点"></a>3、字符串分割注意点</h2><h3 id="字符串分割split"><a href="#字符串分割split" class="headerlink" title="字符串分割split()"></a>字符串分割split()</h3><p>这里要强调一下特殊字符的分割</p>
<blockquote>
<p><code>.</code> <code>|</code> <code>*</code>  这三个字符如果作为分割符，那么就需要加上 <code>\\</code>,比如 <code>str.split(&quot;\\|&quot;)</code> </p>
</blockquote>
<h2 id="4、静态变量使用场景"><a href="#4、静态变量使用场景" class="headerlink" title="4、静态变量使用场景"></a>4、静态变量使用场景</h2><p>有些时间我们还是需要在多个对象里共享一些数据，这个时候就需要引入<strong>常量</strong>了，常量也可以叫做<strong>静态变量</strong>。常量的特点是不需要实例化，在 <strong>Java 当中实际上是创建了一个全局唯一的内存空间并且分配给了这个变量</strong>。所以常量的值只会随 Java 的销毁才会被销毁，这样也就方便我们存储一些数据到内存中，否则会随着对象的销毁被销毁掉的。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote>
<p>1、常用的字符串值<br>2、需要在内存做缓存的值</p>
</blockquote>
<h2 id="5、子类继承了父类的私有属性及方法吗？"><a href="#5、子类继承了父类的私有属性及方法吗？" class="headerlink" title="5、子类继承了父类的私有属性及方法吗？"></a>5、子类继承了父类的私有属性及方法吗？</h2><p><strong>子类对象确实拥有父类对象中所有的属性和方法</strong>，但是父类对象中的私有属性和方法，<strong>子类是无法访问到的</strong>，只是拥有，但不能使用。<br></p>
<h2 id="6、Exception和RuntimeException的区别"><a href="#6、Exception和RuntimeException的区别" class="headerlink" title="6、Exception和RuntimeException的区别"></a>6、Exception和RuntimeException的区别</h2><ul>
<li><code>Exception</code> ：受检查的异常，<font color="red"><strong>这种异常是强制我们catch或throw的异常。</strong></font>你遇到这种异常必须进行catch或throw，如果不处理，编译器会报错。比如：IOException。手工抛出其余的 <code>Exception</code> 异常时，<font color="red"><strong>必须在方法上约定可能抛出的异常。</strong></font></li>
<li><code>RuntimeException</code>：运行时异常，<font color="red"><strong>这种异常我们不需要处理，完全由虚拟机接管。</strong></font>比如我们常见的NullPointerException，我们在写程序时不会进行catch或throw。手工抛出 <code>RuntimeException</code> 异常时，<font color="red"><strong>不需要在方法上约定可能抛出的异常。</strong></font></li>
</ul>
<h2 id="7、实例内部类注意事项"><a href="#7、实例内部类注意事项" class="headerlink" title="7、实例内部类注意事项"></a>7、实例内部类注意事项</h2><p><font color="red" size="5"><strong>特性：</strong></font></p>
<ul>
<li>实例内部类不能有静态成员(包括属性、方法) </li>
<li>实例内部类对象外部创建语法:Outer.new Inner(); </li>
<li>实例方法访问外部类实例成员:Outer.this.成员（包含私有成员）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">"张三"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num1=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outerShow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner1</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name=<span class="string">"李四"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> num2=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> num3=<span class="number">10</span>;<span class="comment">//静态常量在内部类中是可以的</span></span><br><span class="line">        <span class="comment">//private static int num3=30;//在成员内部类中不能声明静态的成员,包括属性和方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">innerShow</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            <span class="comment">//System.out.println(Outer1.this.name);</span></span><br><span class="line">            System.out.println(num2);</span><br><span class="line">            outerShow();<span class="comment">//成员内部类可以直接访问外部类的属性和方法，包括私有的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Okhttp3</title>
    <url>/2020/07/23/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Okhttp3/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p><strong>用途</strong></p>
<blockquote>
<ol>
<li>PUT，DELETE，POST，GET等请求</li>
<li>文件的上传下载</li>
<li>加载图片(内部会图片大小自动压缩)</li>
<li>支持请求回调，直接返回对象、对象集合</li>
<li>支持session的保持</li>
</ol>
</blockquote>
<h2 id="1、依赖"><a href="#1、依赖" class="headerlink" title="1、依赖"></a>1、依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><h3 id="2-1、get请求"><a href="#2-1、get请求" class="headerlink" title="2.1、get请求"></a>2.1、get请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据输入的url，读取页面内容并返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// okHttpClient 实例</span></span><br><span class="line">  OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">  <span class="comment">// 定义一个request</span></span><br><span class="line">  Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</span><br><span class="line">  <span class="comment">// 使用client去请求</span></span><br><span class="line">  Call call = okHttpClient.newCall(request);</span><br><span class="line">  <span class="comment">// 返回结果字符串</span></span><br><span class="line">  String result = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获得返回结果</span></span><br><span class="line">    result = call.execute().body().string();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// 抓取异常</span></span><br><span class="line">    System.out.println(<span class="string">"request "</span> + url + <span class="string">" error . "</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2、post请求"><a href="#2-2、post请求" class="headerlink" title="2.2、post请求"></a>2.2、post请求</h3><h4 id="2-2-1、post-表单数据"><a href="#2-2-1、post-表单数据" class="headerlink" title="2.2.1、post 表单数据"></a>2.2.1、post 表单数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">postContent</span><span class="params">(String url, Map&lt;String, String&gt; formData)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// okHttpClient 实例</span></span><br><span class="line">    OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//post方式提交的数据</span></span><br><span class="line">    Builder builder = <span class="keyword">new</span> FormBody.Builder();</span><br><span class="line">    <span class="comment">// 放入表单数据</span></span><br><span class="line">    <span class="keyword">for</span>(String key : formData.keySet())&#123;</span><br><span class="line">      builder.add(key,formData.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构建 FormBody 对象</span></span><br><span class="line">    FormBody formBody = builder.build();</span><br><span class="line">    <span class="comment">// 指定 post 方式提交FormBody</span></span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder().url(url).post(formBody).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用client去请求</span></span><br><span class="line">    Call call = okHttpClient.newCall(request);</span><br><span class="line">    <span class="comment">// 返回结果字符串</span></span><br><span class="line">    String result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获得返回结果</span></span><br><span class="line">      result = call.execute().body().string();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      <span class="comment">// 抓取异常</span></span><br><span class="line">      System.out.println(<span class="string">"request "</span> + url + <span class="string">" error . "</span>);</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2、post-JSON数据"><a href="#2-2-2、post-JSON数据" class="headerlink" title="2.2.2、post JSON数据"></a>2.2.2、post JSON数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义提交数据的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType JSON_TYPE = MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向指定的 url 提交数据，以 json 的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">postContent</span><span class="params">(String url, Map&lt;String, String&gt; datas)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// okHttpClient 实例</span></span><br><span class="line">  OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据对象转换成 json 格式字符串</span></span><br><span class="line">  String param = JSON.toJSONString(datas);</span><br><span class="line">  <span class="comment">//post方式提交的数据</span></span><br><span class="line">  RequestBody requestBody = RequestBody.create(JSON_TYPE, param);</span><br><span class="line">  Request request = <span class="keyword">new</span> Request.Builder().url(url).post(requestBody).build();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用client去请求</span></span><br><span class="line">  Call call = okHttpClient.newCall(request);</span><br><span class="line">  <span class="comment">// 返回结果字符串</span></span><br><span class="line">  String result = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获得返回结果</span></span><br><span class="line">    result = call.execute().body().string();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// 抓取异常</span></span><br><span class="line">    System.out.println(<span class="string">"request "</span> + url + <span class="string">" error . "</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>JavaMail</title>
    <url>/2020/07/23/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/JavaMail/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、依赖"><a href="#1、依赖" class="headerlink" title="1、依赖"></a>1、依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.Security;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Authenticator;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Message;</span><br><span class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.ssl.internal.ssl.Provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailClient</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//设置SSL连接、邮件环境</span></span><br><span class="line">      Security.addProvider(<span class="keyword">new</span> Provider());</span><br><span class="line">      <span class="keyword">final</span> String SSL_FACTORY = <span class="string">"javax.net.ssl.SSLSocketFactory"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//配置邮箱信息</span></span><br><span class="line">      Properties props = System.getProperties();</span><br><span class="line">      <span class="comment">//邮件服务器</span></span><br><span class="line">      props.setProperty(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtp.qq.com"</span>);</span><br><span class="line">      props.setProperty(<span class="string">"mail.smtp.socketFactory.class"</span>, SSL_FACTORY);</span><br><span class="line">      props.setProperty(<span class="string">"mail.smtp.socketFactory.fallback"</span>, <span class="string">"false"</span>);</span><br><span class="line">      <span class="comment">//邮件服务器端口</span></span><br><span class="line">      props.setProperty(<span class="string">"mail.smtp.port"</span>, <span class="string">"465"</span>);</span><br><span class="line">      props.setProperty(<span class="string">"mail.smtp.socketFactory.port"</span>, <span class="string">"465"</span>);</span><br><span class="line">      <span class="comment">//鉴权信息</span></span><br><span class="line">      props.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">      <span class="comment">//建立邮件会话</span></span><br><span class="line">      Session session = Session.getDefaultInstance(props, <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line">        <span class="comment">//身份认证</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="comment">//1.账户 授权码</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(<span class="string">"987454568@qq.com"</span>, <span class="string">"rzuqttyyhwpabead"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//建立邮件对象</span></span><br><span class="line">      MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">      <span class="comment">//设置邮件的发件人</span></span><br><span class="line">      message.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"987454568@qq.com"</span>));</span><br><span class="line">      <span class="comment">//2.设置邮件的单（多）个收件人</span></span><br><span class="line">      message.setRecipients(Message.RecipientType.TO, <span class="string">"xxxx@qq.com,xxxx@126.com"</span>);</span><br><span class="line">      <span class="comment">//设置邮件的主题</span></span><br><span class="line">      message.setSubject(<span class="string">"通过javamail发出！！！"</span>);</span><br><span class="line">      <span class="comment">//文本部分</span></span><br><span class="line">      message.setContent(<span class="string">"文本邮件测试"</span>, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      message.saveChanges();</span><br><span class="line">      <span class="comment">//发送邮件</span></span><br><span class="line">      Transport.send(message);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>easyexcel</title>
    <url>/2020/07/23/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/easyexcel/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、依赖"><a href="#1、依赖" class="headerlink" title="1、依赖"></a>1、依赖</h2><blockquote>
<p>easyexcel 是一个 JAVA 解析 Excel 工具。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- excel 操作库 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><h3 id="2-1、不转化为类"><a href="#2-1、不转化为类" class="headerlink" title="2.1、不转化为类"></a>2.1、不转化为类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取第一个sheet</span></span><br><span class="line">List&lt;Map&lt;Integer, String&gt;&gt; sheetDatas = EasyExcel.read(<span class="string">"xzq_201907.xlsx"</span>).sheet(<span class="number">0</span>).doReadSync();</span><br><span class="line"><span class="comment">// List 中每个元素表示一行</span></span><br><span class="line"><span class="keyword">for</span> (Map&lt;Integer, String&gt; rowData : sheetDatas) &#123;</span><br><span class="line">  <span class="comment">// Map 中用序号指代每一列</span></span><br><span class="line">  <span class="keyword">for</span> (Integer index : rowData.keySet()) &#123;</span><br><span class="line">    <span class="comment">// 列值</span></span><br><span class="line">    String columnValue = rowData.get(index);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2、自动转化为类"><a href="#2-2、自动转化为类" class="headerlink" title="2.2、自动转化为类"></a>2.2、自动转化为类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;DemoData&gt; sheetDatas = EasyExcel.read(<span class="string">"xzq_201907.xlsx"</span>).head(DemoData<span class="class">.<span class="keyword">class</span>).<span class="title">sheet</span>(0).<span class="title">doReadSync</span>()</span>;</span><br><span class="line">  <span class="keyword">for</span> (DemoData rowData : sheetDatas) &#123;</span><br><span class="line">    System.out.println(JSON.toJSONString(rowData));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String code1;</span><br><span class="line">  <span class="keyword">private</span> String city1;</span><br><span class="line">  <span class="keyword">private</span> String code2;</span><br><span class="line">  <span class="keyword">private</span> String city2;</span><br><span class="line">  <span class="keyword">private</span> String code3;</span><br><span class="line">  <span class="keyword">private</span> String city3;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>fastjson</title>
    <url>/2020/07/23/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/fastjson/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、依赖"><a href="#1、依赖" class="headerlink" title="1、依赖"></a>1、依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSON 操作库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><blockquote>
<p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p>
</blockquote>
<h3 id="2-1、序列化对象"><a href="#2-1、序列化对象" class="headerlink" title="2.1、序列化对象"></a>2.1、序列化对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Building b = <span class="keyword">new</span> Building();</span><br><span class="line">    b.setName(<span class="string">"创业大厦"</span>);</span><br><span class="line">    b.setAddress(<span class="string">"天宁兰陵兰陵路26号 "</span>);</span><br><span class="line"></span><br><span class="line">    String content = JSON.toJSONString(b);</span><br><span class="line">    System.out.println(content);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2、反序列化对象"><a href="#2-2、反序列化对象" class="headerlink" title="2.2、反序列化对象"></a>2.2、反序列化对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Building b = <span class="keyword">new</span> Building();</span><br><span class="line">  b.setName(<span class="string">"创业大厦"</span>);</span><br><span class="line">  b.setAddress(<span class="string">"天宁兰陵兰陵路26号 "</span>);</span><br><span class="line"></span><br><span class="line">  String content = JSON.toJSONString(b);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换为一个具体的对象</span></span><br><span class="line">  Building b2 = JSON.parseObject(content, Building<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  String name = b2.getName();</span><br><span class="line">  System.out.println(name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 特殊情况下，java系统里没有具体对象的 class ，可以反序列化为 Map</span></span><br><span class="line">  Building bInfo = JSON.parseObject(content, Building<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  String name2 = bInfo.getName();</span><br><span class="line">  System.out.println(name2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3、解析JSON对象"><a href="#2-3、解析JSON对象" class="headerlink" title="2.3、解析JSON对象"></a>2.3、解析JSON对象</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"keyword"</span>: <span class="string">"西海情歌"</span>,</span><br><span class="line">    <span class="attr">"priority"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"qc"</span>: [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"semantic"</span>: &#123;</span><br><span class="line">      <span class="attr">"curnum"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"curpage"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"list"</span>: [],</span><br><span class="line">      <span class="attr">"totalnum"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"song"</span>: &#123;</span><br><span class="line">      <span class="attr">"curnum"</span>: <span class="number">50</span>,</span><br><span class="line">      <span class="attr">"curpage"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"list"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"albumid"</span>: <span class="number">14880</span>,</span><br><span class="line">          <span class="attr">"albummid"</span>: <span class="string">"0024RXz94OSKCa"</span>,</span><br><span class="line">          <span class="attr">"albumname"</span>: <span class="string">"刀郎Ⅲ"</span>,</span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   String url = <span class="string">"https://c.y.qq.com/soso/fcgi-bin/client_search_cp?aggr=1&amp;cr=1&amp;flag_qc=0&amp;p=1&amp;n=30&amp;w=西海情歌&amp;format=json"</span>;</span><br><span class="line">   ApiAsker asker = <span class="keyword">new</span> ApiAsker();</span><br><span class="line">   String content = asker.getContent(url);</span><br><span class="line"></span><br><span class="line">   Map contentObj = JSON.parseObject(content, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   <span class="comment">// 解析嵌套的对象，获取数据</span></span><br><span class="line">   Map data = (Map) contentObj.get(<span class="string">"data"</span>);</span><br><span class="line">   Map song = (Map) data.get(<span class="string">"song"</span>);</span><br><span class="line">   List list = (List) song.get(<span class="string">"list"</span>);</span><br><span class="line"></span><br><span class="line">   String albumname = ((Map)list.get(<span class="number">0</span>)).get(<span class="string">"albumname"</span>)+<span class="string">""</span>;</span><br><span class="line">   System.out.println(<span class="string">"albumname = "</span> + albumname);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>复用Session</title>
    <url>/2020/07/22/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E5%A4%8D%E7%94%A8Session/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h2><h3 id="1、登录复用"><a href="#1、登录复用" class="headerlink" title="1、登录复用"></a>1、登录复用</h3><p>我们把 <code>OkHttpClient</code>  对象进行重构，不再定义为 <code>postContent()</code>  方法的变量。而是改为类变量： <code>private static final OkHttpClient okHttpClient</code> ，目的就是在整个类中，使用同一个 okHttpClient 执行 HTTP 请求，提升效率。重构在本节课就派上用场了。<br>分析执行两次请求的过程，实际上过程是类似的，区别是 <code>Request</code> 不同，所以，又做了一次重构，把真正执行的过程封装成一个方法： <code>doExcute</code>  ，被其它 <code>postContent()</code>  和 <code>getContent()</code>  方法调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.youkeda.test.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Cookie;</span><br><span class="line"><span class="keyword">import</span> okhttp3.CookieJar;</span><br><span class="line"><span class="keyword">import</span> okhttp3.FormBody;</span><br><span class="line"><span class="keyword">import</span> okhttp3.FormBody.Builder;</span><br><span class="line"><span class="keyword">import</span> okhttp3.HttpUrl;</span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageLoginer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用 CookieJar 实现 cookie 的存储，便于登录后请求其它 URL 可以复用</span></span><br><span class="line">  <span class="comment">// 在登录成功后返回Response对象时，会有拦截器链判断Response的Headers中是否有Cookie，若有则保存</span></span><br><span class="line">  <span class="comment">// 登录后请求其它URL过程中，会有拦截器链调用loadForRequest()方法来获得内存中的Cookie</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">      .cookieJar(<span class="keyword">new</span> CookieJar() &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, List&lt;Cookie&gt;&gt; cookieStore = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveFromResponse</span><span class="params">(HttpUrl url, List&lt;Cookie&gt; cookies)</span> </span>&#123;</span><br><span class="line">          cookieStore.put(<span class="string">"mtime.com"</span>, cookies);</span><br><span class="line">          <span class="comment">//System.out.println("[saveFromResponse]url.host()=" + url.host());</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Cookie&gt; <span class="title">loadForRequest</span><span class="params">(HttpUrl url)</span> </span>&#123;</span><br><span class="line">          <span class="comment">//System.out.println("[loadForRequest]url.host()=" + url.host());</span></span><br><span class="line">          List&lt;Cookie&gt; cookies = cookieStore.get(<span class="string">"mtime.com"</span>);</span><br><span class="line">          <span class="keyword">return</span> cookies != <span class="keyword">null</span> ? cookies : <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .build();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 向指定的 URL 提交数据，并返回提交后的结果</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">postContent</span><span class="params">(String url, Map&lt;String, String&gt; formData)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//post方式提交的数据</span></span><br><span class="line">    Builder builder = <span class="keyword">new</span> FormBody.Builder();</span><br><span class="line">    <span class="comment">// 放入表单数据</span></span><br><span class="line">    <span class="keyword">for</span> (String key : formData.keySet()) &#123;</span><br><span class="line">      builder.add(key, formData.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构建 FormBody 对象</span></span><br><span class="line">    FormBody formBody = builder.build();</span><br><span class="line">    <span class="comment">// 指定 post 方式提交FormBody</span></span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(url)</span><br><span class="line">        .post(formBody)</span><br><span class="line">        .addHeader(<span class="string">"User-Agent"</span>,</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36"</span>)</span><br><span class="line">        .addHeader(<span class="string">"Referer"</span>,</span><br><span class="line">            <span class="string">"https://passport.mtime.com/member/signin/?redirectUrl=http%3A%2F%2Fwww.mtime.com%2F"</span>)</span><br><span class="line">        .addHeader(<span class="string">"Host"</span>, <span class="string">"passport.mtime.com"</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> doExcute(request);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据输入的url，读取页面内容并返回</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个request</span></span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(url)</span><br><span class="line">        .addHeader(<span class="string">"User-Agent"</span>,</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36"</span>)</span><br><span class="line">        .addHeader(<span class="string">"Host"</span>, <span class="string">"my.mtime.com"</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> doExcute(request);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">doExcute</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 返回结果字符串</span></span><br><span class="line">    String result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      result = okHttpClient.newCall(request).execute().body().string();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      <span class="comment">// 抓取异常</span></span><br><span class="line">      System.out.println(<span class="string">"request "</span> + request.url() + <span class="string">" error . "</span>);</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    PageLoginer asker = <span class="keyword">new</span> PageLoginer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 完成登录</span></span><br><span class="line">    String url = <span class="string">"https://passport.mtime.com/member/signinLogin"</span>;</span><br><span class="line">    <span class="comment">// 登录表单数据</span></span><br><span class="line">    Map&lt;String, String&gt; formData = <span class="keyword">new</span> HashMap();</span><br><span class="line">    formData.put(<span class="string">"loginEmailText"</span>, <span class="string">"15195960267"</span>);</span><br><span class="line">    formData.put(<span class="string">"loginPasswordText"</span>, <span class="string">"6b22c167fc289650b968021ba3cdee70"</span>);</span><br><span class="line">    formData.put(<span class="string">"isvcode"</span>, <span class="string">"true"</span>);</span><br><span class="line">    formData.put(<span class="string">"isAutoSign"</span>, <span class="string">"false"</span>);</span><br><span class="line">    String content = asker.postContent(url, formData);</span><br><span class="line">    System.out.println(<span class="string">"login result:"</span>);</span><br><span class="line">    System.out.println(content);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求我的订单</span></span><br><span class="line">    String myOrderUrl = <span class="string">"http://my.mtime.com/account/"</span>;</span><br><span class="line">    String myOrderContent = asker.getContent(myOrderUrl);</span><br><span class="line">    System.out.println(<span class="string">"orderList result:"</span>);</span><br><span class="line">    System.out.println(myOrderContent);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>类之间的关系</title>
    <url>/2020/07/17/Java/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、关联"><a href="#1、关联" class="headerlink" title="1、关联"></a>1、关联</h2><p><strong>下图表示 <font color="red">Student  类关联  Major  类</font>，即表示Major类为Student类的属性（成员变量）</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1594970231959-d7c25130-3788-43c5-b795-ad0d0004fa51.svg#align=left&display=inline&height=427&margin=%5Bobject%20Object%5D&originHeight=427&originWidth=197&size=0&status=done&style=none&width=197" alt></p>
<h2 id="2、依赖"><a href="#2、依赖" class="headerlink" title="2、依赖"></a>2、依赖</h2><p>代码体现为 <code>电脑</code> 作为 <code>现代人</code> 的局部变量、方法的参数或者对静态方法的调用<br><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1595049747827-a0c1365a-85ea-4b5b-bbe9-30e05ea9d20b.png#align=left&display=inline&height=93&margin=%5Bobject%20Object%5D&name=image.png&originHeight=106&originWidth=269&size=3785&status=done&style=none&width=236" alt="image.png"></p>
<h2 id="3、聚集"><a href="#3、聚集" class="headerlink" title="3、聚集"></a>3、聚集</h2><h2 id="4、泛化"><a href="#4、泛化" class="headerlink" title="4、泛化"></a>4、泛化</h2><p><strong>泛化等同于<font color="red">继承</font></strong><br><img src="https://cdn.nlark.com/yuque/0/2020/svg/437282/1594974464425-cdbdcdc4-c055-40e4-bdd5-107807d78647.svg#align=left&display=inline&height=222&margin=%5Bobject%20Object%5D&originHeight=222&originWidth=266&size=0&status=done&style=none&width=266" alt><br><a name="Z6NTj"></a></p>
<h2 id="5、实现"><a href="#5、实现" class="headerlink" title="5、实现"></a>5、实现</h2>]]></content>
      <categories>
        <category>Java</category>
        <category>Java面向对象</category>
      </categories>
  </entry>
  <entry>
    <title>异常类</title>
    <url>/2020/07/18/Java/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%BC%82%E5%B8%B8%E7%B1%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="一、异常的作用域"><a href="#一、异常的作用域" class="headerlink" title="一、异常的作用域"></a>一、异常的作用域</h2><p>下面的程序执行会失败，这是因为 <code>int len</code> 这个变量是定义在 try 的代码块里，所以如果想要操作 len 这个变量，那么就需要我们提升作用域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> len = getStrLength(<span class="keyword">null</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"程序执行到这"</span>+len);</span><br></pre></td></tr></table></figure>
<h2 id="二、异常的分类"><a href="#二、异常的分类" class="headerlink" title="二、异常的分类"></a>二、异常的分类</h2><p>异常分为 <code>RuntimeException</code>  和其余的 <code>Exception</code> ，两者的<font color="red"><strong>不同点</strong></font>：<br>1、<br>手工抛出 <code>RuntimeException</code> 异常时，<font color="red"><strong>不需要在方法上约定可能抛出的异常</strong></font>。类似 <code>IllegalArgumentException</code> 是 <code>RuntimeException</code> 子类抛出异常时就不需要在方法上声明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"姓名不能为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>手工抛出其余的 <code>Exception</code> 异常时，<font color="red"><strong>必须在方法上约定可能抛出的异常</strong></font>。类似如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(str == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"姓名不能为空"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Integer.parseInt(str);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>2、<br><code>Exception</code> ：受检查的异常，这种异常是<font color="red"><strong>强制我们catch或throw的异常</strong></font>。你遇到这种异常必须进行catch或throw，如果不处理，编译器会报错。比如：IOException。<br><code>RuntimeException</code> ：运行时异常，<font color="red"><strong>这种异常我们不需要处理，完全由虚拟机接管</strong></font>。比如我们常见的NullPointerException，我们在写程序时不会进行catch或throw。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java面向对象</category>
      </categories>
  </entry>
  <entry>
    <title>Java网络编程问题与解决方案</title>
    <url>/2020/07/21/Java/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、User-Agent-解决请求-HTTP-失败"><a href="#1、User-Agent-解决请求-HTTP-失败" class="headerlink" title="1、User-Agent 解决请求 HTTP 失败"></a>1、User-Agent 解决请求 HTTP 失败</h2><p>不一定任何请求都能成功，例如我们在浏览器中输入 <code>IP</code>  地址详情信息查询的 <code>API</code>  ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ip.taobao.com&#x2F;service&#x2F;getIpInfo.php?ip&#x3D;117.89.35.58&amp;format&#x3D;json</span><br></pre></td></tr></table></figure>
<p>该 <code>API</code> 在浏览器中是可以看到结果的，但是下述 <code>Java</code> 程序调用却不行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// okHttpClient 实例</span></span><br><span class="line">  OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">  <span class="comment">// 定义一个request</span></span><br><span class="line">  Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</span><br><span class="line">  <span class="comment">// 返回结果字符串</span></span><br><span class="line">  String result = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    Response response = okHttpClient.newCall(request).execute();</span><br><span class="line">    <span class="comment">// 获取响应内容</span></span><br><span class="line">    result = response.body().string();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// 抓取异常</span></span><br><span class="line">    System.out.println(<span class="string">"request "</span> + url + <span class="string">" error . "</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是因为像 <code>taobao.com</code>  这样的大型网站，处于安全等各种因素考虑，会对请求进行比较严格的校验，其中一个重要的校验，是判断请求是否真的来自于一个真实的浏览器。若不是来自浏览器，例如 <code>Java</code>  程序请求， <code>API</code>  服务器认为不是真实的浏览器访问，就直接拒绝掉了。<br><br><font color="red"><strong>解决方法：</strong></font><br><br>判断请求是否真的来自于一个真实的浏览器，需要从 <code>HTTP</code>  消息头（ <code>Headers</code> ）中取得 <code>User-Agent</code>  信息后，才能判断。 <br><br><code>User-Agent</code>  是存放在 <code>Headers</code>  中的一种数据信息。作用是，在指定 <code>URL</code>  发送请求的时候，告诉服务端当前用户的浏览器类型、版本，甚至操作系统、CPU等非隐私的技术信息。服务器从 <code>Headers</code>  中的 <code>User-Agent</code>  信息获取到浏览器类型、版本等数据后，就认为是一个浏览器请求的环境了，就会给出响应。<br><br><font color="red"><strong>模拟一个 <code>win7+chrome</code> 环境：</strong></font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mozilla&#x2F;5.0 (Windows NT 6.1; WOW64) AppleWebKit&#x2F;535.1 (KHTML, like Gecko) Chrome&#x2F;14.0.835.163 Safari&#x2F;535.1</span><br></pre></td></tr></table></figure>
<h2 id="2、Referer解决“图片防盗链”"><a href="#2、Referer解决“图片防盗链”" class="headerlink" title="2、Referer解决“图片防盗链”"></a>2、Referer解决“图片防盗链”</h2><p><code>https://ham.youkeda.com/course/j14/3/1/0</code> 页面中的下述 <code>img</code> 元素图片无法正常显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://cdn.nlark.com/yuque/0/2019/</span></span></span><br><span class="line"><span class="tag"><span class="string">          png/93870/1571386626984-2462f7f9-d397-4e50-91e4-e4b688dd3410.png</span></span></span><br><span class="line"><span class="tag"><span class="string">          ?_t=41516115"</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">alt</span>=<span class="string">"此处应有图片"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但拷贝图片网址贴到浏览器地址栏，是可以访问的。<br>因为在<code>https://ham.youkeda.com/course/j14/3/1/0</code>页面下，浏览器在请求网页中的图片（或其它任何文件）时，会<font color="red"><strong>自动</strong></font>在  <code>HTTP</code>  消息头 <code>Headers</code>  中，加一个 <code>Referer</code>  信息，表示<font color="red"><strong>请求的来源</strong></font>。<br>即浏览器<font color="red"><strong>自动</strong></font>告诉图片服务器，从当前 <code>youkeda.com</code>  请求此图片，这时图片服务器拒绝了访问，因为图片服务器的规则是不允许其它网站（非 <code>nlark.com</code> ）访问图片。<br><font color="red"><strong>解决方法：</strong></font><br>把 <code>Referer</code>  信息设置为图片原始使用的网站即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// okHttpClient 实例</span></span><br><span class="line">  OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">  <span class="comment">// 定义一个request</span></span><br><span class="line">  Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">    .url(url)</span><br><span class="line">    .addHeader(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1"</span>)</span><br><span class="line">    .addHeader(<span class="string">"Referer"</span>, <span class="string">"http://sug.qianqian.com/"</span>)</span><br><span class="line">    .addHeader(<span class="string">"Host"</span>, <span class="string">"sug.qianqian.com"</span>)</span><br><span class="line">    .build();</span><br><span class="line">  <span class="comment">// 返回结果字符串</span></span><br><span class="line">  String result = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行请求</span></span><br><span class="line">    Response response = okHttpClient.newCall(request).execute();</span><br><span class="line">    <span class="comment">// 获取响应内容</span></span><br><span class="line">    result = response.body().string();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"request "</span> + url + <span class="string">" error . "</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  String url = <span class="string">"http://sug.qianqian.com/info/suggestion?format=json&amp;version=2&amp;from=0&amp;word=刺心&amp;third_type=0&amp;client_type=0"</span>;</span><br><span class="line">  ApiAsker asker = <span class="keyword">new</span> ApiAsker();</span><br><span class="line">  String content = asker.getContent(url);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析结果</span></span><br><span class="line">  Map contentObj = JSON.parseObject(content, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  Map data = (Map) contentObj.get(<span class="string">"data"</span>);</span><br><span class="line">  List list = (List) data.get(<span class="string">"song"</span>);</span><br><span class="line">  <span class="keyword">int</span> length = list.size();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    Map song = (Map)list.get(i);</span><br><span class="line">    String songname = song.get(<span class="string">"songname"</span>).toString();</span><br><span class="line">    String artistname = song.get(<span class="string">"artistname"</span>).toString();</span><br><span class="line">    System.out.println(songname+ <span class="string">"-"</span>+ artistname);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java网络编程</category>
      </categories>
  </entry>
  <entry>
    <title>内部类</title>
    <url>/2020/07/18/Java/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>内部类可分为<font color="red" size="5"><strong>实例内部类</strong></font>和<font color="red" size="5"><strong>静态内部类</strong></font>。</p>
<h2 id="1、实例内部类"><a href="#1、实例内部类" class="headerlink" title="1、实例内部类"></a>1、实例内部类</h2><p><font color="red" size="4"><strong>特性：</strong></font></p>
<ul>
<li>实例内部类不能有静态成员(包括属性、方法) </li>
<li>实例内部类对象外部创建语法:Outer.new Inner(); </li>
<li>实例内部类访问外部类成员的格式:Outer.this.成员（包含私有成员）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">"张三"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num1=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outerShow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner1</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name=<span class="string">"李四"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> num2=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> num3=<span class="number">10</span>;<span class="comment">//静态常量在内部类中是可以的</span></span><br><span class="line">        <span class="comment">//private static int num3=30;//在成员内部类中不能声明静态的成员,包括属性和方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">innerShow</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            <span class="comment">//System.out.println(Outer1.this.name);</span></span><br><span class="line">            System.out.println(num2);</span><br><span class="line">            outerShow();<span class="comment">//成员内部类可以直接访问外部类的属性和方法，包括私有的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2、静态内部类"><a href="#2、静态内部类" class="headerlink" title="2、静态内部类"></a>2、静态内部类</h2><p><font color="red" size="4"><strong>特性：</strong></font></p>
<ul>
<li>静态内部类可以包含静态成员，也可以包含非静态成员</li>
<li>静态内部类只能访问外部类的静态成员，格式为：Outer.静态成员</li>
</ul>
<p>如果我们声明内部类为静态内部类后，那么就可以直接调用这个内部类，不需要先实例化外部类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.youkeda.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerTool</span> </span>&#123; <span class="comment">// 内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.youkeda.test;</span><br><span class="line"><span class="keyword">import</span> com.youkeda.util.OuterUtil;</span><br><span class="line"><span class="comment">// 静态内部类是需要单独 import 的</span></span><br><span class="line"><span class="keyword">import</span> com.youkeda.util.OuterUtil.InnerTool;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterUtilTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       InnerTool tool = <span class="keyword">new</span> InnerTool();</span><br><span class="line">       <span class="keyword">int</span> sum = tool.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">       System.out.println(sum);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java面向对象</category>
      </categories>
  </entry>
  <entry>
    <title>Math类</title>
    <url>/2020/07/15/Java/Java%E7%B1%BB/java.lang/Math%E7%B1%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="一、Math-random"><a href="#一、Math-random" class="headerlink" title="一、Math.random()"></a>一、Math.random()</h2><p>Math.random() 方法返回一个<font color="red"><strong>double类型</strong></font>的随机数，随机数范围为<font color="red"><strong>[0,1)</strong></font>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 得到一个随机数</span></span><br><span class="line"><span class="keyword">double</span> value = Math.random();</span><br><span class="line">System.out.println(value);</span><br></pre></td></tr></table></figure>

<h3 id="生成6位随机数的例子"><a href="#生成6位随机数的例子" class="headerlink" title="生成6位随机数的例子"></a>生成6位随机数的例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到一个随机数[10的5次方，10的6次方)</span></span><br><span class="line"><span class="keyword">double</span> value = (Math.random()*<span class="number">9</span>+<span class="number">1</span>)*<span class="number">10</span>⁵;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java类</category>
        <category>java.lang</category>
      </categories>
  </entry>
  <entry>
    <title>File类</title>
    <url>/2020/07/16/Java/Java%E7%B1%BB/java.io/File%E7%B1%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、构造函数"><a href="#1、构造函数" class="headerlink" title="1、构造函数"></a>1、构造函数</h2><blockquote>
<p>Java文件类以抽象的方式代表文件名和目录路径名。该类主要用于文件和目录的创建、文件的查找和文件的删除等。<br>File对象代表磁盘中实际存在的文件和目录。通过以下构造方法创建一个File对象。</p>
</blockquote>
<h3 id="File-File-parent-String-child"><a href="#File-File-parent-String-child" class="headerlink" title="File(File parent, String child)"></a>File(File parent, String child)</h3><blockquote>
<p>通过给定的 <code>parent</code> 父文件对象和 <code>child</code> 子路径名字符串创建一个新的File实例。</p>
</blockquote>
<h3 id="File-String-pathname"><a href="#File-String-pathname" class="headerlink" title="File(String pathname)"></a>File(String pathname)</h3><blockquote>
<p>通过将给定路径名字符串 <code>pathname</code> 转换成抽象路径名来创建一个新 File 实例。</p>
</blockquote>
<h3 id="File-String-parent-String-child"><a href="#File-String-parent-String-child" class="headerlink" title="File(String parent, String child)"></a>File(String parent, String child)</h3><blockquote>
<p>根据 <code>parent</code>  路径名字符串和 <code>child</code>  路径名字符串创建一个新 File 实例。</p>
</blockquote>
<h3 id="File-URI-uri"><a href="#File-URI-uri" class="headerlink" title="File(URI uri)"></a>File(URI uri)</h3><blockquote>
<p>通过将给定的 <code>file: URI</code>  转换成一个抽象路径名来创建一个新的 File 实例。</p>
</blockquote>
<h2 id="2、方法列表"><a href="#2、方法列表" class="headerlink" title="2、方法列表"></a>2、方法列表</h2><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><font color="red"><strong>public String getName()</strong></font></td>
<td align="left">返回由此抽象路径名表示的文件或目录的名称。</td>
</tr>
<tr>
<td align="left"><strong>public String getParent()</strong></td>
<td align="left">返回此抽象路径名的父路径名的路径名字符串，如果此路径名没有指定父目录，则返回 <code>null</code>。</td>
</tr>
<tr>
<td align="left"><strong>public File getParentFile()</strong></td>
<td align="left">返回此抽象路径名的父路径名的抽象路径名，如果此路径名没有指定父目录，则返回 <code>null</code>。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>public String getPath()</strong></font></td>
<td align="left">将此抽象路径名转换为一个路径名字符串。</td>
</tr>
<tr>
<td align="left"><strong>public boolean isAbsolute()</strong></td>
<td align="left">测试此抽象路径名是否为绝对路径名。</td>
</tr>
<tr>
<td align="left"><strong>public String getAbsolutePath()</strong></td>
<td align="left">返回抽象路径名的绝对路径名字符串。</td>
</tr>
<tr>
<td align="left"><strong>public boolean canRead()</strong></td>
<td align="left">测试应用程序是否可以读取此抽象路径名表示的文件。</td>
</tr>
<tr>
<td align="left"><strong>public boolean canWrite()</strong></td>
<td align="left">测试应用程序是否可以修改此抽象路径名表示的文件。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>public boolean exists()</strong></font></td>
<td align="left">测试此抽象路径名表示的文件或目录是否存在。</td>
</tr>
<tr>
<td align="left"><strong>public boolean isDirectory()</strong></td>
<td align="left">测试此抽象路径名表示的文件是否是一个目录。</td>
</tr>
<tr>
<td align="left"><strong>public boolean isFile()</strong></td>
<td align="left">测试此抽象路径名表示的文件是否是一个标准文件。</td>
</tr>
<tr>
<td align="left"><strong>public long lastModified()</strong></td>
<td align="left">返回此抽象路径名表示的文件最后一次被修改的时间。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>public long length()</strong></font></td>
<td align="left">返回由此抽象路径名表示的文件的长度。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>public boolean createNewFile() throws IOException</strong></font></td>
<td align="left">当且仅当不存在具有此抽象路径名指定的名称的文件时，原子地创建由此抽象路径名指定的一个新的空文件。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>public boolean delete()</strong></font></td>
<td align="left">删除此抽象路径名表示的文件或目录。</td>
</tr>
<tr>
<td align="left"><strong>public void deleteOnExit()</strong></td>
<td align="left">在虚拟机终止时，请求删除此抽象路径名表示的文件或目录。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>public String[] list()</strong></font></td>
<td align="left">返回由此抽象路径名所表示的目录中的文件和目录的名称所组成字符串数组。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>public String[] list(FilenameFilter filter)</strong></font></td>
<td align="left">返回由包含在目录中的文件和目录的名称所组成的字符串数组，这一目录是通过满足指定过滤器的抽象路径名来表示的。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>public File[] listFiles()</strong></font></td>
<td align="left">返回一个抽象路径名数组，这些路径名表示此抽象路径名所表示目录中的文件。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>public File[] listFiles(FileFilter filter)</strong></font></td>
<td align="left">返回表示此抽象路径名所表示目录中的文件和目录的抽象路径名数组，这些路径名满足特定过滤器。</td>
</tr>
<tr>
<td align="left"><strong>public boolean mkdir()</strong></td>
<td align="left">创建此抽象路径名指定的目录。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>public boolean mkdirs()</strong></font></td>
<td align="left">创建此抽象路径名指定的目录，包括创建必需但不存在的父目录。创建整个目录树。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>public boolean renameTo(File dest)</strong></font></td>
<td align="left">重新命名此抽象路径名表示的文件。</td>
</tr>
<tr>
<td align="left"><strong>public boolean setLastModified(long time)</strong></td>
<td align="left">设置由此抽象路径名所指定的文件或目录的最后一次修改时间。</td>
</tr>
<tr>
<td align="left"><strong>public boolean setReadOnly()</strong></td>
<td align="left">标记此抽象路径名指定的文件或目录，以便只可对其进行读操作。</td>
</tr>
<tr>
<td align="left"><strong>public static File createTempFile(String prefix, String suffix, File directory) throws IOException</strong></td>
<td align="left">在指定目录中创建一个新的空文件，使用给定的前缀和后缀字符串生成其名称。</td>
</tr>
<tr>
<td align="left"><strong>public static File createTempFile(String prefix, String suffix) throws IOException</strong></td>
<td align="left">在默认临时文件目录中创建一个空文件，使用给定前缀和后缀生成其名称。</td>
</tr>
<tr>
<td align="left"><strong>public int compareTo(File pathname)</strong></td>
<td align="left">按字母顺序比较两个抽象路径名。</td>
</tr>
<tr>
<td align="left"><strong>public int compareTo(Object o)</strong></td>
<td align="left">按字母顺序比较抽象路径名与给定对象。</td>
</tr>
<tr>
<td align="left"><strong>public boolean equals(Object obj)</strong></td>
<td align="left">测试此抽象路径名与给定对象是否相等。</td>
</tr>
<tr>
<td align="left"><strong>public String toString()</strong></td>
<td align="left">返回此抽象路径名的路径名字符串。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java类</category>
        <category>java.io</category>
      </categories>
  </entry>
  <entry>
    <title>List接口</title>
    <url>/2020/07/19/Java/Java%E7%B1%BB/java.util/List%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、方法列表"><a href="#1、方法列表" class="headerlink" title="1、方法列表"></a>1、方法列表</h2><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><font color="red"><strong>boolean add(E o)</strong></font></td>
<td align="left">向列表的尾部追加指定的元素</td>
</tr>
<tr>
<td align="left"><strong>void add(int index,E element)</strong></td>
<td align="left">在列表的指定位置插入指定元素。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>boolean addAll(Collection&lt;? extends E&gt; c)</strong></font></td>
<td align="left">追加指定 collection中的所有元素到此列表的结尾，顺序是指定collection的迭代器返回这些元素的顺序。</td>
</tr>
<tr>
<td align="left"><strong>boolean addAll(int index,Collection&lt;? extends E&gt; c)</strong></td>
<td align="left">将指定collection中的所有元素都插入到列表中的指定位置。</td>
</tr>
<tr>
<td align="left"><strong>void clear()</strong></td>
<td align="left">从列表中移除所有元素。</td>
</tr>
<tr>
<td align="left"><strong>boolean contains(Object o)</strong></td>
<td align="left">如果列表包含指定的元素，则返回true。</td>
</tr>
<tr>
<td align="left"><strong>boolean containsAll(Collection&lt;?&gt; c)</strong></td>
<td align="left">如果列表包含指定collection的所有元素，则返回true。</td>
</tr>
<tr>
<td align="left"><strong>boolean equals(Object c)</strong></td>
<td align="left">比较指定的对象与列表是否相等。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>E get(int index)</strong></font></td>
<td align="left">返回列表中指定位置的元素。</td>
</tr>
<tr>
<td align="left"><strong>int hashCode()</strong></td>
<td align="left">返回列表的哈希码值。</td>
</tr>
<tr>
<td align="left"><strong>int indexOf(Object o)</strong></td>
<td align="left">返回列表中首次出现指定元素的索引，如果列表不包含此元素，则返回-1。</td>
</tr>
<tr>
<td align="left"><strong>boolean isEmpty()</strong></td>
<td align="left">判断集合是否为空 如果为空 则返回true,否则返回false</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>Iterator<E> iterator()</E></strong></font></td>
<td align="left">返回以正确顺序在列表的元素上进行迭代的迭代器。</td>
</tr>
<tr>
<td align="left"><strong>int lastIndexOf(Object o)</strong></td>
<td align="left">返回列表中最后出现指定元素的索引，如果列表不包含此元素，则返回-1。</td>
</tr>
<tr>
<td align="left"><strong>ListIterator<E> listIterator()</E></strong></td>
<td align="left">返回列表中元素的列表迭代器（以正确的顺序）。</td>
</tr>
<tr>
<td align="left"><strong>ListIterator<E> listIterator(int index)</E></strong></td>
<td align="left">返回列表中元素的列表迭代器（以正确的顺序），从列表的指定位置开始。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>E remove(int index)</strong></font></td>
<td align="left">移除列表中指定位置的元素。</td>
</tr>
<tr>
<td align="left"><strong>boolean remove(Object o)</strong></td>
<td align="left">移除列表中出现的首个指定元素。</td>
</tr>
<tr>
<td align="left"><strong>boolean removeAll(Collection&lt;?&gt; c)</strong></td>
<td align="left">从列表中移除指定collection中包含的所有元素。</td>
</tr>
<tr>
<td align="left"><strong>boolean retainAll(Collection&lt;?&gt; c)</strong></td>
<td align="left">仅在列表中保留指定collection中所包含的元素。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>E set(int index,E element)</strong></font></td>
<td align="left">用指定元素替换列表中指定位置的元素。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>int size()</strong></font></td>
<td align="left">返回列表中的元素数。</td>
</tr>
<tr>
<td align="left"><strong>List<E> subList(int forIndex,int toIndex)</E></strong></td>
<td align="left">返回列表中指定的formIndex(包括) 和toIndex(不包括)之间的部分视图。</td>
</tr>
<tr>
<td align="left"><strong>Object toArray()</strong></td>
<td align="left">返回以正确顺序包含列表中的所有元素的数组。</td>
</tr>
</tbody></table>
<h2 id="2、List类相关的应用"><a href="#2、List类相关的应用" class="headerlink" title="2、List类相关的应用"></a>2、List类相关的应用</h2><h3 id="List转为数组"><a href="#List转为数组" class="headerlink" title="List转为数组"></a>List转为数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; al = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    al.add(<span class="number">10</span>);</span><br><span class="line">    al.add(<span class="number">20</span>);</span><br><span class="line">    al.add(<span class="number">30</span>);</span><br><span class="line">    al.add(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转化为数组</span></span><br><span class="line">    Integer[] arr = al.toArray(<span class="keyword">new</span> Integer[] &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Integer x : arr) &#123;</span><br><span class="line">        System.out.println(x + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="List转为字符串"><a href="#List转为字符串" class="headerlink" title="List转为字符串"></a>List转为字符串</h3><p>利用<code>String</code>类的<code>String.join(&quot;,&quot;,list)</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建字符串集合</span></span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">"Geeks"</span>, <span class="string">"ForGeeks"</span>, <span class="string">"GeeksForGeeks"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转化集合为字符串， 使用 `,` 分割</span></span><br><span class="line">    String string = String.join(<span class="string">","</span>, list);</span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    System.out.println(<span class="string">"字符串是: "</span> + string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="List的排序"><a href="#List的排序" class="headerlink" title="List的排序"></a>List的排序</h3><p>利用<code>java.util.Collection</code>类中的<code>sort()</code>方法</p>
<blockquote>
<p>static <T> void sort(List<T> list, Comparator&lt;? super T&gt; c)</T></T></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   List&lt;Student&gt; ar = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">   ar.add(<span class="keyword">new</span> Student(<span class="number">111</span>, <span class="string">"bbbb"</span>, <span class="string">"london"</span>));</span><br><span class="line">   ar.add(<span class="keyword">new</span> Student(<span class="number">131</span>, <span class="string">"aaaa"</span>, <span class="string">"nyc"</span>));</span><br><span class="line">   ar.add(<span class="keyword">new</span> Student(<span class="number">121</span>, <span class="string">"cccc"</span>, <span class="string">"jaipur"</span>));</span><br><span class="line"></span><br><span class="line">   System.out.println(<span class="string">"原始集合"</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ar.size(); i++) &#123;</span><br><span class="line">     System.out.println(ar.get(i));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 实现升序排序</span></span><br><span class="line">   Collections.sort(ar, <span class="keyword">new</span> Comparator&lt;Student&gt;()&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 第一个参数的学号 &gt; 第二个参数的学号</span></span><br><span class="line">       <span class="keyword">return</span> a.getRollNo() - b.getRollNo();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   System.out.println(<span class="string">"\n排序后的集合"</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ar.size(); i++) &#123;</span><br><span class="line">     System.out.println(ar.get(i));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="List的过滤"><a href="#List的过滤" class="headerlink" title="List的过滤"></a>List的过滤</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountingRecord</span> </span>&#123;</span><br><span class="line">  <span class="comment">//创建时间</span></span><br><span class="line">  <span class="keyword">private</span> String createTime;</span><br><span class="line">  <span class="comment">//记录时间</span></span><br><span class="line">  <span class="keyword">private</span> Date time;</span><br><span class="line">  <span class="comment">//金额</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> amount;</span><br><span class="line">  <span class="comment">//收入或支出</span></span><br><span class="line">  <span class="keyword">private</span> String type;</span><br><span class="line">  <span class="comment">//分类</span></span><br><span class="line">  <span class="keyword">private</span> String category;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//List&lt;AccountingRecord&gt; records=new ArrayList();</span></span><br><span class="line">  List&lt;AccountingRecord&gt; filterd=records.stream().filter(str-&gt;str.getAmount()&gt;amount).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java类</category>
        <category>java.util</category>
      </categories>
  </entry>
  <entry>
    <title>Duration类</title>
    <url>/2020/07/20/Java/Java%E7%B1%BB/java.time/Duration%E7%B1%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、方法列表"><a href="#1、方法列表" class="headerlink" title="1、方法列表"></a>1、方法列表</h2><table>
<thead>
<tr>
<th align="center"><strong>方法</strong></th>
<th align="center"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>static Duration between(Temporal startInclusive, Temporal endExclusive)</strong></td>
<td align="center">获取表示两个临时对象之间的持续时间的Duration</td>
</tr>
</tbody></table>
<h2 id="2、Duration类的应用"><a href="#2、Duration类的应用" class="headerlink" title="2、Duration类的应用"></a>2、Duration类的应用</h2><h3 id="获取两个日期的间隔天数"><a href="#获取两个日期的间隔天数" class="headerlink" title="获取两个日期的间隔天数"></a>获取两个日期的间隔天数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime startDay = LocalDateTime.of(<span class="number">2019</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">LocalDateTime endDay = LocalDateTime.of(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到两个日期的间隔天数</span></span><br><span class="line"><span class="keyword">long</span> days = Duration.between(startDay,endDay).toDays();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java类</category>
        <category>java.time</category>
      </categories>
  </entry>
  <entry>
    <title>Random类</title>
    <url>/2020/07/18/Java/Java%E7%B1%BB/java.util/Random%E7%B1%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、int-nextInt-int-n-方法"><a href="#1、int-nextInt-int-n-方法" class="headerlink" title="1、int nextInt(int n)方法"></a>1、int nextInt(int n)方法</h2><p>int nextInt(int n) 返回一个[0,n)区间内的随机整数，范围: <font color="red"><strong>[0,n)</strong></font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化随机数</span></span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="comment">// 得到0-7之间的随机数</span></span><br><span class="line"><span class="keyword">int</span> num = r.nextInt(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想得到 0-8 之间的随机数</span></span><br><span class="line"><span class="keyword">int</span> num = r.nextInt(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想得到50-100之间的随机数</span></span><br><span class="line"><span class="keyword">int</span> num = r.nextInt(<span class="number">51</span>)+<span class="number">50</span>;</span><br><span class="line"><span class="comment">// 这个 51 = 100 - 50 + 1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java类</category>
        <category>java.util</category>
      </categories>
  </entry>
  <entry>
    <title>Arrays类</title>
    <url>/2020/07/19/Java/Java%E7%B1%BB/java.util/Arrays%E7%B1%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、方法列表"><a href="#1、方法列表" class="headerlink" title="1、方法列表"></a>1、方法列表</h2><p>sort()方法</p>
<h2 id="2、Arrays类的相关应用"><a href="#2、Arrays类的相关应用" class="headerlink" title="2、Arrays类的相关应用"></a>2、Arrays类的相关应用</h2><h3 id="数组转为List"><a href="#数组转为List" class="headerlink" title="数组转为List"></a>数组转为List</h3><p>利用<code>java.util.Arrays</code>类的<code>asList()</code>方法,该方法无法对<font color="red"><strong>基本类型数组</strong></font>进行转换。<font color="red"><strong>只能转换对象数组</strong></font>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 数字数组</span></span><br><span class="line">  Integer[] intArr = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">35</span> &#125;;</span><br><span class="line">  <span class="comment">// 转化数组为 list</span></span><br><span class="line">  List&lt;Integer&gt; lists = Arrays.asList(intArr);</span><br><span class="line">  System.out.println(<span class="string">"集合的长度是: "</span> + lists.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 转化数组为 list</span></span><br><span class="line">  List&lt;String&gt; lists = Arrays.asList(<span class="string">"小王"</span>,<span class="string">"小明"</span>);</span><br><span class="line">  System.out.println(<span class="string">"集合的长度是: "</span> + lists.size());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转化数组为 list2</span></span><br><span class="line">  List&lt;String&gt; lists2 = Arrays.asList(<span class="string">"小王"</span>,<span class="string">"小明"</span>,<span class="string">"小李"</span>);</span><br><span class="line">  System.out.println(<span class="string">"集合2的长度是: "</span> + lists2.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h3><p>利用<code>java.util.Arrays</code>类的<code>sort()</code>方法就可以实现数组的自定义排序，默认是升序排序。</p>
<blockquote>
<p>static <T> void sort(T[] a, Comparator&lt; super T&gt; c):</T></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Integer[] intArr = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">35</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义排序</span></span><br><span class="line">    Arrays.sort(intArr, <span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span></span>&#123;</span><br><span class="line">            <span class="comment">// 判断 o2&gt;o1，执行降序排序</span></span><br><span class="line">            <span class="keyword">return</span> o2-o1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"Integer Array: "</span></span><br><span class="line">                       + Arrays.toString(intArr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组转为字符串"><a href="#数组转为字符串" class="headerlink" title="数组转为字符串"></a>数组转为字符串</h3><p>利用<code>java.util.Arrays</code>类的<code>toString()</code>方法用于转换数组（包含基本类型数组）为字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span>[] boolArr = <span class="keyword">new</span> <span class="keyword">boolean</span>[] &#123; <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">true</span> &#125;;</span><br><span class="line">    <span class="keyword">byte</span>[] byteArr = <span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span>[] charArr = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'g'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>, <span class="string">'k'</span>, <span class="string">'s'</span> &#125;;</span><br><span class="line">    <span class="keyword">double</span>[] dblArr = <span class="keyword">new</span> <span class="keyword">double</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">float</span>[] floatArr = <span class="keyword">new</span> <span class="keyword">float</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span>[] intArr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">long</span>[] lomgArr = <span class="keyword">new</span> <span class="keyword">long</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">    Object[] objArr = <span class="keyword">new</span> Object[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">short</span>[] shortArr = <span class="keyword">new</span> <span class="keyword">short</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(Arrays.toString(boolArr));</span><br><span class="line">    System.out.println(Arrays.toString(byteArr));</span><br><span class="line">    System.out.println(Arrays.toString(charArr));</span><br><span class="line">    System.out.println(Arrays.toString(dblArr));</span><br><span class="line">    System.out.println(Arrays.toString(floatArr));</span><br><span class="line">    System.out.println(Arrays.toString(intArr));</span><br><span class="line">    System.out.println(Arrays.toString(lomgArr));</span><br><span class="line">    System.out.println(Arrays.toString(objArr));</span><br><span class="line">    System.out.println(Arrays.toString(shortArr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
        <category>Java类</category>
        <category>java.util</category>
      </categories>
  </entry>
  <entry>
    <title>Map接口</title>
    <url>/2020/07/17/Java/Java%E7%B1%BB/java.util/Map%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、分析"><a href="#1、分析" class="headerlink" title="1、分析"></a>1、分析</h2><p>Map接口中键和值一一映射. 可以通过键来获取值。</p>
<ul>
<li>给定一个键和一个值，你可以将该值存储在一个Map对象. 之后，你可以通过键来访问对应的值。 </li>
<li>当访问的值不存在的时候，方法就会抛出一个NoSuchElementException异常. </li>
<li>当对象的类型和Map里元素类型不兼容的时候，就会抛出一个 ClassCastException异常。 </li>
<li>当在不允许使用Null对象的Map中使用Null对象，会抛出一个NullPointerException 异常。 </li>
<li>当尝试修改一个只读的Map时，会抛出一个UnsupportedOperationException异常。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/437282/1594976617431-376ad1cc-79fb-4b3f-ad89-1d32572c7580.png#align=left&display=inline&height=259&margin=%5Bobject%20Object%5D&originHeight=259&originWidth=441&size=0&status=done&style=none&width=441" alt></p>
<h2 id="2、方法列表"><a href="#2、方法列表" class="headerlink" title="2、方法列表"></a>2、方法列表</h2><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><font color="red"><strong>void clear( )</strong></font></td>
<td align="left"><em>从此映射中移除所有映射关系（可选操作）。</em></td>
</tr>
<tr>
<td align="left"><font color="red"><strong>boolean containsKey(Object k)</strong></font></td>
<td align="left"><em>如果此映射包含指定键的映射关系，则返回 true。</em></td>
</tr>
<tr>
<td align="left"><font color="red"><strong>boolean containsValue(Object v)</strong></font></td>
<td align="left"><em>如果此映射将一个或多个键映射到指定值，则返回 true。</em></td>
</tr>
<tr>
<td align="left"><font color="red"><strong>Set entrySet( )</strong></font></td>
<td align="left">返回此映射中包含的映射关系的 Set 视图。</td>
</tr>
<tr>
<td align="left"><strong>boolean equals(Object obj)</strong></td>
<td align="left">比较指定的对象与此映射是否相等。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>Object get(Object k)</strong></font></td>
<td align="left">返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回 null。</td>
</tr>
<tr>
<td align="left"><strong>boolean isEmpty( )</strong></td>
<td align="left">如果此映射未包含键-值映射关系，则返回 true。</td>
</tr>
<tr>
<td align="left"><strong>Set keySet( )</strong></td>
<td align="left">返回此映射中包含的键的 Set 视图。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>Object put(Object k, Object v)</strong></font></td>
<td align="left">将指定的值与此映射中的指定键关联（可选操作）。</td>
</tr>
<tr>
<td align="left"><strong>void putAll(Map m)</strong></td>
<td align="left">从指定映射中将所有映射关系复制到此映射中（可选操作）。</td>
</tr>
<tr>
<td align="left"><strong>Object remove(Object k)</strong></td>
<td align="left">如果存在一个键的映射关系，则将其从此映射中移除（可选操作）。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>int size( )</strong></font></td>
<td align="left">返回此映射中的键-值映射关系数。</td>
</tr>
<tr>
<td align="left"><font color="red"><strong>Collection values( )</strong></font></td>
<td align="left">返回此映射中包含的值的 Collection 视图。</td>
</tr>
</tbody></table>
<h2 id="3、Map接口的相关应用"><a href="#3、Map接口的相关应用" class="headerlink" title="3、Map接口的相关应用"></a>3、Map接口的相关应用</h2><h3 id="Map的遍历"><a href="#Map的遍历" class="headerlink" title="Map的遍历"></a>Map的遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer,String&gt; entry : map.entrySet())&#123; </span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">"Key = "</span> + entry.getKey() + </span><br><span class="line">                 <span class="string">", Value = "</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java类</category>
        <category>java.util</category>
      </categories>
  </entry>
  <entry>
    <title>LocalDate类</title>
    <url>/2020/07/16/Java/Java%E7%B1%BB/java.time/LocalDate%E7%B1%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="1、方法列表"><a href="#1、方法列表" class="headerlink" title="1、方法列表"></a>1、方法列表</h2><h3 id="创建LocalDate"><a href="#创建LocalDate" class="headerlink" title="创建LocalDate"></a>创建LocalDate</h3><table>
<thead>
<tr>
<th align="center"><strong>方法</strong></th>
<th align="center"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><font color="red"><strong>static LocalDate now()</strong></font></td>
<td align="center">获取默认时区的当前日期</td>
</tr>
<tr>
<td align="center"><strong>static LocalDate now(Clock clock)</strong></td>
<td align="center">从指定时钟获取当前日期</td>
</tr>
<tr>
<td align="center"><strong>static LocalDate now(ZoneId zone)</strong></td>
<td align="center">获取指定时区的当前日期</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>static LocalDate of(int year, int month, int dayOfMonth)</strong></font></td>
<td align="center">根据指定的年、月、日获取LocalDate 实例</td>
</tr>
<tr>
<td align="center"><strong>static LocalDate of(int year, Month month, int dayOfMonth)</strong></td>
<td align="center">根据指定的年、月、日获取LocalDate 实例</td>
</tr>
</tbody></table>
<h3 id="获取、修改年月日等"><a href="#获取、修改年月日等" class="headerlink" title="获取、修改年月日等"></a>获取、修改年月日等</h3><table>
<thead>
<tr>
<th align="center"><strong>方法</strong></th>
<th align="center"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><font color="red"><strong>int getYear()</strong></font></td>
<td align="center">获取年份</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>int getMonth().getValue()</strong></font></td>
<td align="center">获取月份</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>int getDayOfMonth()</strong></font></td>
<td align="center">获取日期在该月是第几天</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>int getDayOfWeek().getValue()</strong></font></td>
<td align="center">获取日期是星期几</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>int getDayOfYear()</strong></font></td>
<td align="center">获取日期在该年是第几天</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>LocalDate withYear(int year)</strong></font></td>
<td align="center">修改该日期的年份</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>LocalDate withMonth(int month)</strong></font></td>
<td align="center">修改该日期的月份</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>LocalDate withDayOfMonth(int dayOfMonth)</strong></font></td>
<td align="center">修改该日期在当月的天数</td>
</tr>
</tbody></table>
<h3 id="加减天、周、月、年"><a href="#加减天、周、月、年" class="headerlink" title="加减天、周、月、年"></a>加减天、周、月、年</h3><table>
<thead>
<tr>
<th align="center"><strong>方法</strong></th>
<th align="center"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>LocalDate plusDays(long daysToAdd)</strong></td>
<td align="center">返回增加了*天的LocalDate副本</td>
</tr>
<tr>
<td align="center"><strong>LocalDate plusWeeks(long weeksToAdd)</strong></td>
<td align="center">返回增加了*周的LocalDate副本</td>
</tr>
<tr>
<td align="center"><strong>LocalDate plusMonths(long monthsToAdd)</strong></td>
<td align="center">返回增加了*月的LocalDate副本</td>
</tr>
<tr>
<td align="center"><strong>LocalDate plusYears(long yearsToAdd)</strong></td>
<td align="center">返回增加了*年的LocalDate副本</td>
</tr>
<tr>
<td align="center"><strong>LocalDate minusDays(long daysToSubtract)</strong></td>
<td align="center">返回减少了*天的LocalDate副本</td>
</tr>
<tr>
<td align="center"><strong>LocalDate minusWeeks(long weeksToSubtract)</strong></td>
<td align="center">返回减少了*周的LocalDate副本</td>
</tr>
<tr>
<td align="center"><strong>LocalDate minusMonths(long monthsToSubtract)</strong></td>
<td align="center">返回减少了*月的LocalDate副本</td>
</tr>
<tr>
<td align="center"><strong>LocalDate minusYears(long yearsToSubtract)</strong></td>
<td align="center">返回减少了*年的LocalDate副本</td>
</tr>
</tbody></table>
<h3 id="日期判断、比较"><a href="#日期判断、比较" class="headerlink" title="日期判断、比较"></a>日期判断、比较</h3><table>
<thead>
<tr>
<th align="center"><strong>方法</strong></th>
<th align="center"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>boolean isLeapYear()</strong></td>
<td align="center">检查是否闰年</td>
</tr>
<tr>
<td align="center"><strong>int lengthOfMonth()</strong></td>
<td align="center">返回日期所在月份共有几天</td>
</tr>
<tr>
<td align="center"><strong>int lengthOfYear()</strong></td>
<td align="center">返回日期所在年份共有几天</td>
</tr>
<tr>
<td align="center"><strong>boolean isEqual(ChronoLocalDate other)</strong></td>
<td align="center">日期与另一个日期比较</td>
</tr>
<tr>
<td align="center"><strong>boolean isAfter(ChronoLocalDate other)</strong></td>
<td align="center">检查日期是否在指定日期之后</td>
</tr>
<tr>
<td align="center"><strong>boolean isBefore(ChronoLocalDate other)</strong></td>
<td align="center">检查日期是否在指定日期之前</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>int compareTo(ChronoLocalDate other)</strong></font></td>
<td align="center">比较该日期与other日期的大小，返回正数，那么当前对象时间较晚（数字较大）</td>
</tr>
</tbody></table>
<h3 id="日期转换"><a href="#日期转换" class="headerlink" title="日期转换"></a>日期转换</h3><table>
<thead>
<tr>
<th align="center"><strong>方法</strong></th>
<th align="center"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><font color="red"><strong>String format(DateTimeFormatter formatter)</strong></font></td>
<td align="center">使用特定格式化形式将LocalDate转为字符串</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>static LocalDate parse(CharSequence text)</strong></font></td>
<td align="center">从文本字符串获取LocalDate实例</td>
</tr>
<tr>
<td align="center"><font color="red"><strong>static LocalDate parse(CharSequence text, DateTimeFormatter formatter)</strong></font></td>
<td align="center">使用特定格式化形式从文本字符串获取LocalDate实例</td>
</tr>
</tbody></table>
<h2 id="2、LocalDate的相关应用"><a href="#2、LocalDate的相关应用" class="headerlink" title="2、LocalDate的相关应用"></a>2、LocalDate的相关应用</h2><h3 id="日期与字符串的转化"><a href="#日期与字符串的转化" class="headerlink" title="日期与字符串的转化"></a>日期与字符串的转化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate time = LocalDate.now();</span><br><span class="line">   <span class="comment">// 打印默认的时间数据</span></span><br><span class="line">   System.out.println(time.toString());</span><br><span class="line">   <span class="comment">// 创建一个格式化方式</span></span><br><span class="line">   DateTimeFormatter df = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd"</span>);</span><br><span class="line">   <span class="comment">// 执行时间的格式化处理，得到期望格式的时间字符串</span></span><br><span class="line">   String timeStr = df.format(time);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 定义一个时间字符串，日期是2019年1月1日</span></span><br><span class="line">   String date = <span class="string">"2019/01/01"</span>;</span><br><span class="line">   DateTimeFormatter df = DateTimeFormatter.ofPattern(<span class="string">"yyyy/MM/dd"</span>);</span><br><span class="line">   <span class="comment">// 把字符串转化位 LocalDate 对象，并得到字符串匹配的日期</span></span><br><span class="line">   LocalDate date2 = LocalDate.parse(date,df);</span><br><span class="line">   <span class="comment">// 打印出日期</span></span><br><span class="line">   System.out.println(date2.toString());</span><br></pre></td></tr></table></figure>
<h3 id="获取年、月、日、星期"><a href="#获取年、月、日、星期" class="headerlink" title="获取年、月、日、星期"></a>获取年、月、日、星期</h3><blockquote>
<p>获取月、星期      重点关注</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate time = LocalDate.now();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 得到当前时间所在年</span></span><br><span class="line">   <span class="keyword">int</span> year = time.getYear();</span><br><span class="line">   System.out.println(<span class="string">"当前年份 "</span> + year);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 得到当前时间所在月</span></span><br><span class="line">   <span class="keyword">int</span> month = time.getMonth().getValue();</span><br><span class="line">   System.out.println(<span class="string">"当前月份 "</span> + month);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 得到当前时间在这个月中的天数</span></span><br><span class="line">   <span class="keyword">int</span> day = time.getDayOfMonth();</span><br><span class="line">   System.out.println(<span class="string">"当前日 "</span> + day);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 得到当前时间所在星期数</span></span><br><span class="line">   <span class="keyword">int</span> dayOfWeek = time.getDayOfWeek().getValue();</span><br><span class="line">   System.out.println(<span class="string">"当前星期 "</span> + dayOfWeek);</span><br></pre></td></tr></table></figure>
<h3 id="日期的加减运算"><a href="#日期的加减运算" class="headerlink" title="日期的加减运算"></a>日期的加减运算</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">"当前："</span> + now.toString());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"加法运算"</span>);</span><br><span class="line">System.out.println(<span class="string">"加1天："</span> + now.plusDays(<span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">"加1周："</span> + now.plusWeeks(<span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">"加1月："</span> + now.plusMonths(<span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">"加1年："</span> + now.plusYears(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"减法运算"</span>);</span><br><span class="line">System.out.println(<span class="string">"减1天："</span> + now.minusDays(<span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">"减1周："</span> + now.minusWeeks(<span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">"减1月："</span> + now.minusMonths(<span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">"减1年："</span> + now.minusYears(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<h3 id="日期之间的比较"><a href="#日期之间的比较" class="headerlink" title="日期之间的比较"></a>日期之间的比较</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 可以对两个 LocalDate 进行比较，</span></span><br><span class="line">   <span class="comment">// 可以判断一个日期是否在另一个日期之前、之后或同一天，</span></span><br><span class="line">   <span class="comment">// 或者判断两个日期是否是同年同月同日。</span></span><br><span class="line">   <span class="keyword">boolean</span> isBefore = now.minusDays(<span class="number">1</span>).isBefore(LocalDate.now());</span><br><span class="line">   System.out.println(<span class="string">"是否在当天之前："</span> + isBefore);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">boolean</span> isAfter = now.plusDays(<span class="number">1</span>).isAfter(LocalDate.now());</span><br><span class="line">   System.out.println(<span class="string">"是否在当天之后："</span> + isAfter);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 判断是否是当天</span></span><br><span class="line">   <span class="keyword">boolean</span> sameDate = now.isEqual(LocalDate.now());</span><br><span class="line">   System.out.println(<span class="string">"是否在当天："</span> + sameDate);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Java类</category>
        <category>java.time</category>
      </categories>
  </entry>
</search>
